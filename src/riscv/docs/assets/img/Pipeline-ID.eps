%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 273.000000 413.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A365) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 273 413
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 273 413
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<


002A0025001A0012000C0000001C2B00BA00140004001B2BB8000D20457D691844B8000A2B00BA00010002000C2B01BA00030002000C2B01BE00030028002000190012000B00122BBE00040024001D00170011000A00122B00BE00010033002A00210017000E00122BBE0002002A0022001B0013000C00122B00BA0005000400112BB8000020457D691844B800002B00
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/D 1 def
/I 2 def
/uni2B90 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4174458 def
currentdict currentfile eexec

855A7E993DE0B181D6D3CBF5C83B6590E39037BA98B0DFDC251EFF3E3E05CF605BE60F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /d put
dup 35 /underscore put
dup 36 /i put
dup 37 /n put
dup 38 /s put
dup 39 /t put
dup 40 /r put
dup 41 /c put
dup 42 /one put
dup 43 /hyphen put
dup 44 /o put
dup 45 /R put
dup 46 /F put
dup 47 /two put
dup 48 /A put
dup 49 /B put
dup 50 /b put
dup 51 /y put
dup 52 /a put
dup 53 /u put
dup 54 /l put
dup 55 /e put
dup 56 /quoteleft put
dup 57 /zero put
dup 58 /quoteright put
dup 59 /m put
dup 60 /U put
dup 61 /I put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70001003200EE0153013E0003000B00BA0000000100032B303113152135320121013E50500002002AFFF5020202C50017003300CBB800342FB800352FB8003410B80018D0B800182FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8003510B80026DCB8000EDC410500DA000E00EA000E00025D411B0009000E0019000E0029000E0039000E0049000E0059000E0069000E0079000E0089000E0099000E00A9000E00B9000E00C9000E000D5D00BA0013001F00032BB8001310BA002D000700032BB8002D10303113343E0433321E0415140E0223222E0227141E0433323E0435342E0423220E0484010911213224243221110901051B3C36363C1B055A04101E344F37384E341E100404101E344F37374F341E1004015D1A3F3F3C2D1C1C2D3C3F3F1A2863573C3C57632727545047361F1F364750542727545048362020364850540000000100570000016402C5000A0023BA0001000900032BB800011000B800012FB800002FBA0007000800032BB800071030312111230E03231533110164410726374424B802C528341E0B44FE0400010018000001EE02C5002B0091B8002D2FBA0001000000032BB8000110B8002D10B80022DCB8000BDC410500DA000B00EA000B00025D411B0009000B0019000B0029000B0039000B0049000B0059000B0069000B0079000B0089000B0099000B00A9000B00B9000B00C9000B000D5DB8002210B80016D0B800162FB8000110B80018D0B800182F00BA0018001500032BBA0027000600032BB800271030311333263E0233321E0215140E02070E03072135213E03373E0335342E0223220E022C55010F2235251C32251617



3311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB8001310303113113311343E0233321615113311342E022322072335405513263927313855112A44337335020205FDFB0124233B2C183830FEA201542A45321C5E520000020024FFF5021A02110013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020043FF3B022D02110018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233505140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D27130205FD36010A171F12082A49623737624B2C272B46FE2648382221364726244637222036450000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B00090031001900310029003100


00>] def
/CharStrings 31 dict dup begin
/.notdef 0 def
/hyphen 1 def
/zero 2 def
/one 3 def
/two 4 def
/A 5 def
/B 6 def
/F 7 def
/I 8 def
/R 9 def
/U 10 def
/underscore 11 def
/a 12 def
/b 13 def
/c 14 def
/d 15 def
/e 16 def
/i 17 def
/l 18 def
/m 19 def
/n 20 def
/o 21 def
/p 22 def
/r 23 def
/s 24 def
/t 25 def
/u 26 def
/y 27 def
/quoteleft 28 def
/quoteright 29 def
/uni2B91 30 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9310E889D4B294081CFBE92AFCC7FE3BB36C58496644FE561335DE1474FE8AD03205701574C44B4D576342C56A9D706E281EA108DEB8D3620968689F108F42E3465F4907B536F4FE9D04E7B8166A6A2BA83CA9FFF1C1718F554CCB25D0DC00D863238211DD2DE19EBE6D22E93E9ABF4059B19CFD4D1F02212CBBC6A7481D34812A55C058E99171FEDB4CA94FEDA547B6844B9FFEBABB30599CCEFC29EC63DBAC8E3F91DB4FB6EA2E497D9A7F06F911A40186FA54E78041D90BA08AAD2567CA6AF62FECE06BCDABE9C1556CCD314BAD81DF87B49A3134C64C66CE87CB98E906F34BF853142CB4CFF726EB2C500EE9B0DF8E96EEB27D35C3F3BF2F2A8E69FCC1F90426B17B70DA2BD058C0E2A5E446CC2FD08AB0D5B24FA31A170FBC4C75B45F7755443921C5705FF85216589281B046CED802A41074EA7A68E4D239CF92C801CE56F2162A41A3CCA6C928B262C2554D46CBEFBA4F1B52D22135D9B983E865E23A76AA7EE737FDD11E2C9E25B059FD69619643816F8A399D189B1D62EEFB8929EEB2F0591D7F087985990694807AC4B99E3B9A1ABF77F82575A53AB1213E922259A1467F0C32EECFD8960D25736296CF5F9C80F4E85C158766730C5813490D699B42A99F3B8A05097FA7A6506D021B2CAF414EDE7AC005905ACDDB15E3800A19994643D529231235E0C4F8A1BD4DC692230E13C5D5E7F4B30D70D49A37B28F4EC8F84F78AB997F84C7AD988C3EE88D0AA85783FA3967BA0FE22552C8CC24BBF303A4
C10ACAD9F7024063A919E531C79ACAB8B7E48ACA4D666114BEC69785392AC233738254E6119C40501A6D9D820BFC9B3D9470B4DFA2E495AB36267E7A1C22488B5ED5FEF8696BC5B08BB22477DFCAE832C2736C853504403CC5F81527662C9EE0A6D88A5D64C9320C49B872EFCFD3E8164CB5D2B64301743B04C7ED20B51E575318ECA48C45B7AAD43CD56CE98E7BF1E24D2772C2125DDC157ABDC90D20089FD49C729B9771C8E50A9C6BC7CE74DFA6A82448825D6EC6FF0FF28F73345E0D8C3A7115423F6EF362B1E02E8250C9CC0120DE4C742E31487F2EA7F99C606100DE407FF23537587AE214DEBAA8C3898E863C5EE9431ADA451C310B29796D4326339BE853E1301FC9EE18A2CCFAE63EC9D4F304FD0B46954021048E30EFE7963DD71FD557BEAA79DB1E5D8F6CD358B1D0279BC9B434B07FD240A871AE317B7E83C207EEF7F467A476B082E1E8C428FCABF36D1C9097C002E63D74C423A46CC70A42DC704A6A463590E65BD8E7DBAB7384BF42B94DEC3D269DC39C9FD757D502A754E65F2DB4C5EDDF5A9211D8A99F6DD523EDF3CB104F43EA4439D2FA6CB37758BA217D8A5C763BC5E6674F7B19E96B50A42E2DDE27AD45C6FCB1356CD9C3A6A5AC3C309F016CC66CAE09BECEBF3E42820F3274E7B19774E996BC5E83B3FBE212496099F2239BF910D97535583AFA513BD04894B076F64E01F4E43BAA3A6EEA5537CB4934357C7756E0290F05BA34DA3DAF769F8C43718AC0FB980B0CB2DB5B409123FF16297D843D7CDB5D637AD34A947A15805FEFB7B651EDE7DD4F82A9E83BC6552506FF7BCFDBAE793EEE11593748D160ED4F00890C6D9A839A13762884C556CE123B0CE8ED5571C1E7FE565DDBBC658FF39B73D70EB7E3004F2C93E27366706DFEFD7A92AD8BE1744DE10AA90568ACA453D3E30084FCE64E30890694F25582EF9FE844BD3C353A294732FC92A84DC29C5A7997EF290BF05D65FC27FB718BB41929B1121FD1B7833104433000B8CF473D7E87225EFD302B77A204410C2312EA900DD336CFAC106F5F2B85BC612105AC7A65B1CFED2D10F729E9D0CBE3EFEE88E3BF9A678FEBC982F89C8D402F76763E267CD895FB852A071F869857493AEB93B49B7ED3A2B8ED1A192B76DC116C10F280B624A86D90AB1D1126227CB0E02E64E36156C347B9502E872F8956871992C462415AE6E75BC544A1B76F57DA68F969FABB8186538710C7B581DB5A0CE5176B5968C687049C4E2ADC7A695212E0EADABEAB56D4BE8B8502516EB600029B10961379A1723515A9A79C1CC2F1F2C45D39C67BE93011D405E4256C4AA3A9314A2683E2B8AA1E60FB3E855BF5CF5C73095F51E69CF0056650EB97E897D06624982D41D692D3FBFA58B2BC736360080FDD7300C3B4579BF52B5701AD3CC80C6940EE50C2E845E59631CA20BF30D9D475B6CBFA
85B7D2662858FF4D275286F0943AFBEFD7F25BBD2309922AE53E303D1BD8E91FE057BB7B0440130263DAC2E8F0F43369690AC85BF05523B84C0A56B78CF9461939A2A17C079D65C25A2C8EFFD70CC8FD8B91A3180E02EBE57367590987FE1FDA744D26BF00B5A792CB9E36CDFB4B252862B0D487D89FA61827FB284E87CDF6E34158A6BA096B0B601717D3BC4EC95850F78A2F35B799E37AD4D0F1E731901E46A4AED96932EFC7568797C7F8CAED68C53F69208E310C90AFF045D86D7F5F90094E53B783629EE7774E7533DF6C128F774A73DFD8952C44C709C6E9F2ECDCF42EAB2CE536251262B7FB35FEE25E10EFB1597403328E5855ABFEF6CDAE01F199C7B4D75F4BDD9141734EC20F4C6A575E16F29DA3D51F1AC8EDED85B00366BB702285523C24F7FB74E00ADDEA419275D96A635BB8B1143BC5D5E4CE45D2CE3C2D2EDE25DB038E776D22CCC68A5A8B0A3D98F044C4089D968A9C7CB29EDDDD8F0D74F7443B5FED4C600B23469AD3E733382893802FEDC41D3E9AF741CF0DABF9581AF48AA67742BA0749955E878F929095026FB904C7AEEC98256766FB29516584EEB629DDCC3ECDA219B806C5BCE906C94EFA15B7EAE82131AB5EFCF69DADA59D8927A03E87D13847695A56E4AC75F738E3A8E294B44D3842E3DFDA9DBFF59928C0EE6772D399EF887409808046C4DFEA29F4E98F60BD5DC852E68BD2BA3EE71FD4CB0613DB4FCCF9A95F837C83CE2F47C9C113DEA46A9EC4CE02196B42B65F376818B8AFC2389A83FF00FE09324B7E41974338FFA2980F7E4C45D61F78539B2C64FFFDB1DACF114F27A75BA24097E9C8640D948FC3E633DD324F3B96A74AA2714A734FA83BF15E9811970843CA87FCD439D23A3556145B0E290A01D67D704EEF9E3B8B2941ABF499A3B2CEC0F081EF4EC70C828A1BD1B7BAE37EF9BEDA0146CCEEEEAAE1A1DC5C7A59F3F885D6D4815B723EE5B3EC4FA621EB2CEC57C4232AE16A5D636C76E3B34FD9A95EA0226F0997CA1B9F8DAB9AF476BA798E35853BF688F97A6A1F815EC83F36BDA787126DC3E83ABF2901D8CB0429C0F93D03693D1AF889037D4551823BC408FCC0B748CC922513413BB266AC25E72FE4DF4F434ED5ABD709DBED98F1972B4CA5BB61565BA24FDC6D4C12CAC3DCFEBD88AEB0E49D56C048CDDC73351A1E876012C4C1C3933537FBFF9053C7EF5833F560C534722CCCB7536E59FD44BD2A7633C20962A9EF0F2F635C601ADDDD420CCA19B027EF7C0EEC22CB4F44E1C994C70151DC5C1C63A6F3BD0FC7FF5E40D3FC7518CDC6EB6798D308C5FFAD69882BD77F85ADEDDF07744B748EC0098F464294693DE5E43861C1E3A80985A58FC1AB6A3E227E2494885B070C20214033D82CD89015F66D40AA74E6937722F4F5DCE726DA913A33BDA2BA4478256A39ACF814958A6604D5D10D071060


660AC40F7686BAC388473AD4A5F25C7FA263802EA6D4B64AB232D3B03DF66E662BCAF48379303B8EEA88859ED1D96712FA518219060959F06CC9E29ECC4C702E5ECA4931DF4282D07A7CD2F84CA95B742A2372BF203CF03FD7CB6BC141E13338B079C5C329577D5562945B99BE07436DC5AF1B3B8D14635E48AB2460F2EDA7A4A58AD1732DB1A0576722514F1211A689318EAC006A315A26E8665DAFFB8366E7CD5210161F2F1BEDC7584EFECF3EB9672531FDBE16E5E2DE2A9790040D6564DB6FC6D3666024E4441D1E1A204D046358952C6C449B6EAB4C23F437B180DEEA45EF0E8E136E57CD89B214D09683E1A3823AABA93F5D638EED63F5401595A06FFCD1E15F31060D40201FC858E7E24B8DFA91DDE084B77D76EE0634BE93579A8A491954AF15D1675B6F9C56183F43E0E4B95EB27E22D3B234E533103AFCDDDD8B60A44319D7F03DF60A2D0489CBD96447AEE65A53307581E4BABB6F6CA47E4C7E9FCE3960CEADDD53E70E4BF53BC97A4E233338CFD4314F148C35296A0B80CED9A2C83D068779E9632880A990E14709B56B2D6A5D7BD48DC958338D49973DDF3D0815839DC3994A144CA0A1AAB25109537B37EC6451B1CD7BB9A12DFB9E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0.64705902 0.64705902 0.64705902 sc
q
0 0 273 413 rc
1 0 0 -1 -28 440 cm
29.03689 28.346457 m
283.46448 28.346457 l
283.46448 439.34485 l
29.03689 439.34485 l
h
29.03689 28.346457 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 8.2864456 402.67792 cm
/F1.1[ 10 0 0 -10 0 0]sf
-4.6199889 3.8549652 m
(!")[ 2.950000 0.000000 ] xS
1 0 0 -1 17.333054 334.86044 cm
/F2.1[ 8 0 0 -8 0 0]sf
-12.153893 2.8880005 m
(!"#$%&'\()[ 4.744000 4.744000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
1 0 0 -1 14.571319 382.52213 cm
-9.3921585 2.8880005 m
(!"#!\))[ 4.744000 4.744000 4.000000 4.744000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
116.07873 270.41687 m
106.90568 273.67551 110.56366 301.108 125.19673 296.42722 c
126.55435 305.55154 143.57065 304.07056 143.4594 296.42722 c
154.12914 306.20316 167.76442 286.71011 158.61861 276.93414 c
169.59312 272.19452 158.48012 246.65802 149.47337 250.92381 c
148.75255 243.81375 132.65118 241.32562 131.23793 250.92381 c
122.12051 240.67342 103.10921 256.43396 116.07873 270.41687 c
h
116.07873 270.41687 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
144.07874 169.58315 m
134.90567 166.32449 138.56366 138.89201 153.19673 143.5728 c
154.55435 134.44846 171.57065 135.92944 171.4594 143.5728 c
182.12914 133.79684 195.76442 153.28989 186.61861 163.06584 c
197.59312 167.80548 186.48012 193.34198 177.47337 189.07619 c
176.75255 196.18625 160.65118 198.67438 159.23793 189.07619 c
150.1205 199.32658 131.10921 183.56602 144.07874 169.58315 c
h
144.07874 169.58315 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 225.1532 295.60901 cm
-22.375504 2.8880005 m
(&\(\)*+',+-.)[ 4.000000 2.520000 4.296000 4.448000 3.112000 2.520000 4.592000 3.112000 5.480000 0.000000 ] xS
1 0 0 -1 225.1532 262.33771 cm
-22.375504 2.8880005 m
(&\(\)/+',+-.)[ 4.000000 2.520000 4.296000 4.448000 3.112000 2.520000 4.592000 3.112000 5.480000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 90.535217 m
186.96474 90.535217 l
186.96474 51.392513 l
163.47911 51.392513 l
h
163.47911 90.535217 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 349.46478 m
214.96474 349.46478 l
214.96474 388.60748 l
191.47911 388.60748 l
h
191.47911 349.46478 m
S
214.96474 369.01437 m
277.32156 368.89893 l
S
0 i
CM
253.32156 71.10849 m
249.3188 72.601082 l
249.32436 69.601089 l
h
253.32156 71.10849 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.32156 368.89151 m
277.31879 367.39893 l
277.32434 370.39893 l
h
281.32156 368.89151 m
S
/Cs2 SC
0 sc
1 0 0 -1 231.0219 76.409866 cm
-14.612191 2.8880005 m
($"#,!0)[ 1.776000 4.744000 4.000000 4.592000 4.744000 0.000000 ] xS
1 0 0 -1 233.4384 381.72296 cm
-11.54871 2.8880005 m
($"#!\))[ 1.776000 4.744000 4.000000 4.744000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 43.712116 m
186.96474 43.712116 l
186.96474 4.5694108 l
163.47911 4.5694108 l
h
163.47911 43.712116 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 396.28787 m
214.96474 396.28787 l
214.96474 435.4306 l
191.47911 435.4306 l
h
191.47911 396.28787 m
S
214.96474 415.85922 m
277.32156 415.85922 l
S
0 i
CM
253.32156 24.140764 m
249.32156 25.640764 l
249.32156 22.640764 l
h
253.32156 24.140764 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.32156 415.85922 m
277.32156 414.35922 l
277.32156 417.35922 l
h
281.32156 415.85922 m
S
/Cs2 SC
0 sc
1 0 0 -1 231.0219 29.43862 cm
-14.908191 2.8880005 m
($"#,!1)[ 1.776000 4.744000 4.000000 4.592000 4.744000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 184.62585 m
186.96474 184.62585 l
186.96474 145.48315 l
163.47911 145.48315 l
h
163.47911 184.62585 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 255.37415 m
214.96474 255.37415 l
214.96474 294.51685 l
191.47911 294.51685 l
h
191.47911 255.37415 m
S
214.96474 274.9455 m
277.56448 274.9455 l
S
0 i
CM
253.56447 165.0545 m
249.56447 166.5545 l
249.56447 163.5545 l
h
253.56447 165.0545 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.56448 274.9455 m
277.56448 273.4455 l
277.56448 276.4455 l
h
281.56448 274.9455 m
S
/Cs2 SC
0 sc
1 0 0 -1 228.60538 171.27657 cm
-28.643673 2.8880005 m
($"#23!4&&0)[ 1.776000 4.744000 4.000000 4.744000 4.000000 4.744000 4.296000 4.000000 4.000000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 137.6546 m
186.96474 137.6546 l
186.96474 98.511902 l
163.47911 98.511902 l
h
163.47911 137.6546 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 302.3454 m
214.96474 302.3454 l
214.96474 341.4881 l
191.47911 341.4881 l
h
191.47911 302.3454 m
S
214.96474 321.91675 m
277.56448 321.91675 l
S
0 i
CM
253.56447 118.08325 m
249.56447 119.58325 l
249.56447 116.58325 l
h
253.56447 118.08325 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.56448 321.91675 m
277.56448 320.41675 l
277.56448 323.41675 l
h
281.56448 321.91675 m
S
/Cs2 SC
0 sc
1 0 0 -1 228.26015 123.38111 cm
-28.594456 2.8880005 m
($"#23!4&&1)[ 1.776000 4.744000 4.000000 4.744000 4.000000 4.744000 4.296000 4.000000 4.000000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 231.59711 m
186.96474 231.59711 l
186.96474 192.45439 l
163.47911 192.45439 l
h
163.47911 231.59711 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 208.40289 m
214.96474 208.40289 l
214.96474 247.54561 l
191.47911 247.54561 l
h
191.47911 208.40289 m
S
214.96474 227.97426 m
277.32156 227.97426 l
S
0 i
CM
253.32156 212.02574 m
249.32156 213.52574 l
249.32156 210.52574 l
h
253.32156 212.02574 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.32156 227.97426 m
277.32156 226.47426 l
277.32156 229.47426 l
h
281.32156 227.97426 m
S
/Cs2 SC
0 sc
1 0 0 -1 226.53407 217.32361 cm
-20.356371 2.8880005 m
($"#252267)[ 1.776000 4.744000 4.000000 4.744000 4.448000 4.744000 4.744000 1.776000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 349.02521 m
186.96474 349.02521 l
186.96474 309.88251 l
163.47911 309.88251 l
h
163.47911 349.02521 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 90.974785 m
214.96474 90.974785 l
214.96474 130.11749 l
191.47911 130.11749 l
h
191.47911 90.974785 m
S
214.96474 110.54613 m
277.32156 110.54613 l
S
0 i
CM
253.32156 329.45386 m
249.32156 330.95386 l
249.32156 327.95386 l
h
253.32156 329.45386 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.32156 110.54613 m
277.32156 109.04613 l
277.32156 112.04613 l
h
281.32156 110.54613 m
S
/Cs2 SC
0 sc
1 0 0 -1 230.67667 334.75171 cm
-15.154974 2.8880005 m
($"#$%&'\()[ 1.776000 4.744000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
163.47911 395.99646 m
186.96474 395.99646 l
186.96474 356.85376 l
163.47911 356.85376 l
h
163.47911 395.99646 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
191.47911 44.00354 m
214.96474 44.00354 l
214.96474 83.14624 l
191.47911 83.14624 l
h
191.47911 44.00354 m
S
214.96474 63.57489 m
277.32156 63.57489 l
S
0 i
CM
253.32156 376.42511 m
249.32156 377.92511 l
249.32156 374.92511 l
h
253.32156 376.42511 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.32156 63.57489 m
277.32156 62.07489 l
277.32156 65.07489 l
h
281.32156 63.57489 m
S
1 J
1 j
0.60000002 i
188.6546 150.0244 m
277.56451 149.70972 l
S
0 i
CM
253.56448 290.30444 m
249.5592 291.79025 l
249.56982 288.79028 l
h
253.56448 290.30444 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.56448 149.69557 m
277.5592 148.20973 l
277.56982 151.20972 l
h
281.56448 149.69557 m
S
1 J
1 j
0.60000002 i
188.18056 182.3618 m
277.56448 182.3618 l
S
0 i
CM
253.56447 257.63821 m
249.56447 259.13821 l
249.56447 256.13821 l
h
253.56447 257.63821 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
281.56448 182.3618 m
277.56448 180.8618 l
277.56448 183.8618 l
h
281.56448 182.3618 m
S
1 1 1 sc
CM
98.380432 208.83971 m
91.737877 211.04718 94.386765 229.63048 104.98312 226.45963 c
105.96623 232.64062 118.28838 231.63737 118.20782 226.45963 c
125.93417 233.08203 135.808 219.87708 129.18518 213.25465 c
137.13223 210.04393 129.08488 192.74501 122.56276 195.63474 c
122.04079 190.81825 110.38117 189.13275 109.35779 195.63474 c
102.75551 188.69092 88.988708 199.36743 98.380432 208.83971 c
h
98.380432 208.83971 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
126.38043 231.16029 m
119.73788 228.95282 122.38676 210.36952 132.98312 213.54037 c
133.96623 207.35938 146.28838 208.36263 146.20782 213.54037 c
153.93417 206.91797 163.808 220.12292 157.18518 226.74535 c
165.13223 229.95607 157.08488 247.25499 150.56276 244.36526 c
150.04079 249.18175 138.38118 250.86725 137.35779 244.36526 c
130.75551 251.30908 116.98871 240.63257 126.38043 231.16029 c
h
126.38043 231.16029 m
S
158.20781 227.97426 m
185.57912 227.97426 l
S
0 i
CM
161.57912 212.02574 m
157.57912 213.52574 l
157.57912 210.52574 l
h
161.57912 212.02574 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
189.57912 227.97426 m
185.57912 226.47426 l
185.57912 229.47426 l
h
189.57912 227.97426 m
S
1 J
1 j
0.60000002 i
29.03689 63.57489 m
185.57912 63.57489 l
S
0 i
CM
161.57912 376.42511 m
157.57912 377.92511 l
157.57912 374.92511 l
h
161.57912 376.42511 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
189.57912 63.57489 m
185.57912 62.07489 l
185.57912 65.07489 l
h
189.57912 63.57489 m
S
1 J
1 j
0.60000002 i
29.03689 110.54613 m
185.57912 110.54613 l
S
0 i
CM
161.57912 329.45386 m
157.57912 330.95386 l
157.57912 327.95386 l
h
161.57912 329.45386 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
189.57912 110.54613 m
185.57912 109.04613 l
185.57912 112.04613 l
h
189.57912 110.54613 m
S
/Cs2 SC
0 sc
1 0 0 -1 71.143105 76.518593 cm
-9.3921585 2.8880005 m
(!"#!\))[ 4.744000 4.744000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 65.274422 64.775787 cm
-3.5234706 2.8880005 m
(89:)[ 2.224000 4.448000 0.000000 ] xS
1 0 0 -1 70.452675 29.54735 cm
-8.7017241 2.8880005 m
($;;<)[ 1.776000 6.824000 6.824000 0.000000 ] xS
1 0 0 -1 68.726585 17.804539 cm
-6.9756398 2.8880005 m
($;;=)[ 1.776000 6.824000 6.824000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -28 440 cm
78.424881 112.04613 m
77.965271 220.14571 l
117.07938 220.14571 l
S
0 i
CM
93.079384 219.85429 m
89.079384 221.35429 l
89.079384 218.35429 l
h
93.079384 219.85429 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
121.07938 220.14571 m
117.07938 218.64571 l
117.07938 221.64571 l
h
121.07938 220.14571 m
S
CM
51.4874 328.3887 m
50.899128 327.80542 49.949387 327.80945 49.366096 328.39774 c
48.78281 328.98599 48.786846 329.93573 49.375118 330.51901 c
49.96339 331.10233 50.913128 331.09827 51.496418 330.51001 c
52.079708 329.92172 52.075668 328.97198 51.4874 328.3887 c
f
1 0 0 -1 -28 440 cm
79.487396 111.6113 m
78.899124 112.19459 77.949387 112.19055 77.366096 111.60228 c
76.782806 111.01401 76.78685 110.06427 77.375114 109.48098 c
77.963387 108.89769 78.913124 108.90173 79.496414 109.49 c
80.079704 110.07827 80.075668 111.02801 79.487396 111.6113 c
S
1 J
1 j
0.60000002 i
77.965271 221.64571 m
77.965271 321.91675 l
185.57912 321.91675 l
S
0 i
CM
161.57912 118.08325 m
157.57912 119.58325 l
157.57912 116.58325 l
h
161.57912 118.08325 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
189.57912 321.91675 m
185.57912 320.41675 l
185.57912 323.41675 l
h
189.57912 321.91675 m
S
CM
51.025932 218.79362 m
50.440144 218.20784 49.490398 218.20784 48.904613 218.79362 c
48.318825 219.37941 48.318825 220.32916 48.904613 220.91495 c
49.490398 221.50073 50.440144 221.50073 51.025932 220.91495 c
51.611717 220.32916 51.611717 219.37941 51.025932 218.79362 c
f
1 0 0 -1 -28 440 cm
79.025932 221.20638 m
78.440147 221.79216 77.490395 221.79216 76.90461 221.20638 c
76.318825 220.62059 76.318825 219.67084 76.90461 219.08505 c
77.490395 218.49927 78.440147 218.49927 79.025932 219.08505 c
79.611717 219.67084 79.611717 220.62059 79.025932 221.20638 c
S
1 J
1 j
0.60000002 i
79.465271 274.9455 m
185.57912 274.9455 l
S
0 i
CM
161.57912 165.0545 m
157.57912 166.5545 l
157.57912 163.5545 l
h
161.57912 165.0545 m
f
0 J
0 j
1 0 0 -1 -28 440 cm
189.57912 274.9455 m
185.57912 273.4455 l
185.57912 276.4455 l
h
189.57912 274.9455 m
S
CM
51.025932 166.11516 m
51.611717 165.52937 51.611717 164.57964 51.025932 163.99384 c
50.440144 163.40805 49.490398 163.40805 48.904613 163.99384 c
48.318825 164.57964 48.318825 165.52937 48.904613 166.11516 c
49.490398 166.70094 50.440144 166.70094 51.025932 166.11516 c
f
1 0 0 -1 -28 440 cm
79.025932 273.88483 m
79.611717 274.47061 79.611717 275.42038 79.025932 276.00616 c
78.440147 276.59195 77.490395 276.59195 76.90461 276.00616 c
76.318825 275.42038 76.318825 274.47061 76.90461 273.88483 c
77.490395 273.29904 78.440147 273.29904 79.025932 273.88483 c
S
/Cs2 SC
0 sc
1 0 0 -1 68.609703 207.53793 cm
-15.154974 2.8880005 m
($"#$%&'\()[ 1.776000 4.744000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -28 440 cm
136.65082 168.94922 m
79.943665 169.25218 l
S
0 i
CM
51.498661 271.80612 m
52.087566 271.22348 52.09264 270.27374 51.509995 269.68481 c
50.927345 269.09592 49.977612 269.09085 49.388702 269.67349 c
48.799797 270.25613 48.794724 271.20587 49.377369 271.79477 c
49.960018 272.3837 50.909752 272.38876 51.498661 271.80612 c
f
0 J
0 j
1 0 0 -1 -28 440 cm
79.498657 168.19388 m
80.08757 168.77654 80.092644 169.72627 79.509995 170.31517 c
78.927345 170.90408 77.977615 170.90915 77.388702 170.32651 c
76.799797 169.74385 76.794724 168.79413 77.377373 168.20522 c
77.960022 167.61632 78.909752 167.61124 79.498657 168.19388 c
S
CM
112.65076 271.07214 m
108.64281 272.55075 l
108.65884 269.55081 l
h
112.65076 271.07214 m
f
1 0 0 -1 -28 440 cm
140.65076 168.92784 m
136.64281 167.44923 l
136.65883 170.44919 l
h
140.65076 168.92784 m
S
1 J
1 j
0.60000002 i
140.5936 380.6308 m
87.750946 380.92709 l
S
191.47911 415.85922 m
87.750946 415.85922 l
S
140.5936 427.60205 m
87.750946 427.89835 l
S
191.47911 369.05121 m
87.750946 369.18427 l
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
112.5936 90.683365 m
112.5936 51.540657 l
130.20781 58.064442 l
130.20781 84.159576 l
h
112.5936 90.683365 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
140.5936 349.31665 m
140.5936 388.45935 l
158.20781 381.93555 l
158.20781 355.84042 l
h
140.5936 349.31665 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
112.5936 43.712116 m
112.5936 4.5694108 l
130.20781 11.093195 l
130.20781 37.188332 l
h
112.5936 43.712116 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -28 440 cm
140.5936 396.28787 m
140.5936 435.4306 l
158.20781 428.9068 l
158.20781 402.81168 l
h
140.5936 396.28787 m
S
124.96163 242.90567 m
117.10798 249.50275 l
85.793816 249.50275 l
S
123.62382 235.41423 m
117.10798 237.75993 l
85.793816 237.75993 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 73.217125 195.12479 cm
-22.288721 2.8880005 m
(!"#252267)[ 4.744000 4.744000 4.000000 4.744000 4.448000 4.744000 4.744000 1.776000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
