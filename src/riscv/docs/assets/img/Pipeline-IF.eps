%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 282.000000 257.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A365) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 282 257
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 282 257
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /F put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<

B0406559593A2DB800182C2046B00425465258238A592046206A6164B0042546206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020011000301E202BA000300070043B800142BB800082FB800002FB8000810B80006D0B800062FB900020012F4B8000010B900040012F4B80009DC00BB0003000F000500182BBB0004000F000000182B303101211121131121110187FEE801185BFE2F025FFE00025BFD4902B70000000100450000023B02CA0009002FBA0007000000032BB8000710B80002D000B800012FBA0000000700032BB8000010BA0006000300032BB8000610303113113311213521352135459D012BFED5015902CAFD3601277AA58400010045000000E202CA0003001BBA0003000000032BB8000310B80005DC00B800012FB800002F303113113311459D02CAFD3602CA0000000001000EFF5C047902F90010002BB800142BBB000B0012000800182BB8000B10B80012DC00B800092FB800002FBB0005000F000E00182B303105090117072132363511331114062321170191FE7D01854EE802BC292873655FFD3FEDA4014C015159BF2D2A01C1FE3F6461C7FFFF0045FF5C04B002F90047000304BE0000C00140000000000100000001000092DAA97A5F0F3CF5011903E800000000B643F84C00000000D59BEF2CFC06FE1F059D04750001000900020000000000000001000003CFFF27001D05DCFC06FE77059D00010000000000000000000000000000000501F40011025100450127004504BE000E04BE0045000000380064008000B600C200010000000500960009006D0004000200000000001E00000200042800030001B800142B01BA0004001000162B01BF00110027001F001A0012000C0000001C2BBF0012002C0025001A0012000C0000001C2BBF00130024001F001A0012000C0000001C2B00BF000E0030002500200017000C0000001C2BBF000F0034002B00200017000C0000001C2BBF0010002A0025001A0012000C0000001C2B00BA00140004001B2BB8000D20457D691844B8000A2B00BA00010002000C2B01BA00030002000C2B01BE00030028002000190012000B00122BBE00040024001D00170011000A00122B00BE00010033002A00210017000E00122BBE0002002A0022001B0013000C0012
2B00BA0005000400112BB8000020457D691844B800002B00
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/F 1 def
/I 2 def
/uni2B90 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4174458 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D1893E7882B3267FBEDEB6776297FEA99C681B11228C21FCD8CEF48BA467B0450225729846B0141D233872E403C84738E77CFF02F4E0073E7B7FE3656AFBAF27C995D2D55D6166DCFBE4FC6F594823CFC475045C98247A97136A89C780294B1BA007C8B0235636DFD26CF93552472BB13218F2DE87F726323F691F07655F870B4851606C7F2D6323FD7026B9FFC4856067D36BFF3F8663B5F198EFD6622174D55978116B6820277194168D91AF8F1FB3EE6699C2F6CFECAB4EDE68B89204ADBA08D9C4C1EFFAD9FF186FDE20F14C4BC695F585E6A727875ED81AD4A70556CBEAC5CC685EB29375E962AFBA5D44D899587B57397E24FAFF39C47B59E87A8459C717C6E3E6E5A7F1290FD2E54A383F7F21E744DEDFB57EAEB4B5BEE59EE6E23C23A50E57F4898F5FFFB2A8714720DD38D56A092D9E6A4A7DFB7A6AB34042551262719B7145285F420317D447BB89F3B574667F71A1FC39986896D71268864FFCFD09F2D160D618213AA64702C155AA10E2FF234EA9FEDDD43EEB249C51B4C1F0AEE128D80B579211BF81E572D38DA916B0EE78E2C778F1F9CA56C2F5CAC8FCD44FCF3F7C6D4973420C38A44DB809556388F9FA450448D853345830884D8F10FECD302C0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /e put
dup 34 /x put
dup 35 /underscore put
dup 36 /n put
dup 37 /t put
dup 38 /p put
dup 39 /c put
dup 40 /plus put
dup 41 /two put
dup 42 /s put
dup 43 /i put
dup 44 /f put
dup 45 /b put
dup 46 /u put
dup 47 /l put
dup 48 /r put
dup 49 /F put
dup 50 /h put
dup 51 /space put
dup 52 /slash put
dup 53 /S put
dup 54 /a put
dup 55 /v put
dup 56 /d put
dup 57 /four put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






00030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 27 dict dup begin
/.notdef 0 def
/space 1 def
/plus 2 def
/slash 3 def
/two 4 def
/four 5 def
/F 6 def
/S 7 def
/underscore 8 def
/a 9 def
/b 10 def
/c 11 def
/d 12 def
/e 13 def
/f 14 def
/h 15 def
/i 16 def
/l 17 def
/n 18 def
/p 19 def
/r 20 def
/s 21 def
/t 22 def
/u 23 def
/v 24 def
/x 25 def
/uni2B91 26 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec

60F8680F4ECB14BD2C3E63E8B5450A25175B41F18198F3D32B0D8B7E7955810DA4A78B85B0C7A1EA890055F269BFAC42E89C8A7FB479314B6C15814DF96FD9E188CA8D43197B91A2AFB81AD39773F2AFFD8D81D8A8948B55C4670196832B508A8F4D51CACA7ECAD6F66C7BE6E1183E248B2A3F1131B7ED6FC65CEF7F0D96D525EA1953C042A4552170ED07310D657BF6155FFB92631621DE5AAF47C48E1AB78961F955D8EAA29B7B68EF9D68D9D23C292D4FEBDDC1CBE2255D07E8937FCD377D0EFAB53D2F41C320FD8E5BEABCB1DDED15F5877740C3E808D2099F652844B3EEA3C9F37BB1A9B9E6DC01D8480772A1E6A476ABDFD54183C87FCDE9C34D2E3692EF5310F8FEA13464ADCB3E3FCCE668700067DA5809844D605076288816DCCDC722B41560DF5934CB64471E1FC8B259E6A079CBD149BF8CC489136188D6D11B1E2ACFD83D2BCF1B63C9D7B377968EB39499062219994464C85A6F74F0229BB68513A61DF195345A40BEFF5C25234B2EB296803026D47F51470F7515BF7A7603000FD7C5638748C634465EE1DDCE4654D2B898A979C12EC810D5EB2A6101A57F1DAF171D395D7AFE2DD72FBFD8233459D8E25349732DAA323B6E81DFB8B1C82EE0F96E31D05E25BCED75AF6AEEAADB1A82B04557A632E93AA560F918B7EF1D8664AA804C3F534983330DB52BABE53C06DF1F35283DA822C34DD28FC7A98C0EA8DA5DBB2828FA9D7029EE8CA3C9FD47AB16F998CA5D95A7F6B2A9895E28A3C3BD036499F738DDBDAE7F1520B5FD6110057D0CA573F9F9DD5663E48D2816AA3C7EEB5C8572EAB95811C9CC1310C79990DD78784E081DE6B887AE013CCB6858AEF6798EF988B8042D17793191B012B563DE554BE7359045BC3C6FA71B7DBA6B99C20E6942E3669738DAEF0BB0BEE6D9E6FBE887D9F2EC9FC779F03E445183FD8E631343DE973888E17620B60065B468ADD84F14A5CAC3DD312C630B1FFCA09D81FDBB49955E699EDAB5F66610D5387927FF3EE695EF63105F2CA621BF2E2506E5216EC8F5104BF64611822CB5B772CAF096811AB30132F59F7700540287E98FE45CDBD77DDCF793F832A8F7A0B5D1E90023596A2719160179FACE81A8055458BBB0528FFE27717CE3243096BE699B9A6C865EBF16A8F5BEE4A01902ECCC4BB006E0D22DEC1835F9F2B01283414CEB7A3A7D697486862D158AB0E247AA19F93C266CAEF887E46E62B974F057E97E59C5AF75B8D77566DE38ADEF6160CCE371D9A1648E838293A8CA1700E95D3C4E9B353481AC8E31507B878C4B5F3770880762546EC3041137EE296DD20C209CEBF8266D62A0A9B647A74426B706CB6C399AD86C8462342A8FC1DB1F374A183CEE9927A64A41E6C8B862A0349CA8A1FB4297E15FF5BEA41B8FE24828B8D4E2AEBE9517D94EA5B77770D9C4F30845CF1355A8813CA444

823FE70EF9000B684F3C9CE46F9904EAB434F9FCE782348D14D712551DE65208C31913E6732A9EE2E59A7674EEFA0706E70EC113D84D969B4297D64A6F2AB0450D21F6BF4FFB681DEE97ADCC2E7C77A1703C415838AD552B56819CA3661F4644696C5B225E4C64745AA2B84E8AF94004C0B143A7493933275352E4373C8EE4A6EB589C442CDBCA9A0F068CB5EBF98DACEAB0591520CB4687B072AE6B8F1C0261CBED459D796D309BE82F114C19678580692593A0EB1B116E66BFC4E92AF4A87DE8F689941AF0C02F0D05F7490A29F79D80FBE3134A6535C19F36D53D8997F381B17B829C37EDA4D6202632793362F7E8AB67C97870E3F2C315BF44C1688773977AAB5DFA46F120BEC4B1F975348EAD46B49B9936BE136E71B03BE52A93D124657C59B2B068E2E46FCA389DE6E9228B2B2665718AB6C78AC696DADFE059F101DD075408201095882687D54E0498879DE441D789D510B6081C6FC62EB9E226AAAC3AC5E6524975DFDCBB8B7F2780F543FFFE7DD247354C7738116EE5786FB013A430833884E8DE3079A5368BD7B1A300657B5CC653579CD8423930661BDE7A38EB3B7AAF44F6B70C0444AF2E63464945413FF8930CBA978BB51818E1269BA1F6DE1EF1B538F7E6B0C1F94533FA644EDE3904703701C3237B1C16A84B5A663A9319DE359EFD678C3D59D46CD54E391AA471D65CC28DB3BB309AD737BDEFF23E9CBB01B7650D12FA3149F9CE8BDDC51FCF5B74B27F81073E273E748AEF7AE20EA90FBF6DF1085FD10F576B76735D88FEABFBA17B57E27D167C2C4108E0F147B51226767D7F5439D56F8C420FB36AD84FEF8890546183FD182F5E866BFA36A9585D3F7D8B25587086EA01E48558F9AD74235DCB5CCE7C0F55A6E9FFC06FDF64BBB22792ED9B9358422CFF2E035A06EF52A5AAB9882D8E2857D91ECE5A5DBB751058DCDDB203D8C47837BED6CB0047E1ACDF0C61C39D751D10E8525588C7DD0E63124ED3551A9E1E70B0AF93A65C22121D0FAA570EF3660809529276205A1F4DC05561949DB6B39A10A8A54393CA537CA1E3EA243740F820EA32DFDC77ACBB41A58D8A75569D471C73ADF4187E83C08E15C156E2F823D72D59CE0AA8BC7D0FB236EF89BA909286D8E5987D9260EBBE9623FEAC86CEC30F63E8DD21C8D1B5C375C74F52EF6DE1E9EE05973E16FE372156B5193DD78F99D42D86A376A3F344B3CCA3666B73EE8054543B9C2A4B5225861718E5F9908B4D76BC1AAB6A8BE6FED00EDC03510FA3BA73FFE71BE1555EDBBF91EC4F7DD212AAF2A1D7BC17BA036AF5DF10DF8DE1BFD393A69732BD98EF855D123D0ABE1F5BC83259A45E97C4C1DC0722D6AA00FF10B588131B7B450BB3E8412EB6CFBB4CF4B8C4048226113D8A3B2E233FE4525FA956C2C10B6BF0CF0A4A681A57DC5A729C4809BD532474ABBEB29CF315DCFA
61FCD1905B3BA29E9EA70FBA99A1BF266F7CECA86053453448F0A1936854AB603DCC1B580B3F8401451AB5BEF5BCE44477892A69AE752B5BF0AC85D0710E6E085B7EF3808D5332FF80564C9FE819C2C9C7CBBEC53132040830EA36346B90548C3EF743245DB5DE3A8ED1390B0BDAD10065BCC0D338C51D071E36C563C727945DEFB28EC887B7D3EA36924D692F4E1062FDCE72DCF76E5F8B30DF8E7965E80332DCA2359532F0C9A99C0C756A18EDAADF8991A65CDE9715E2FE57CD8E82E3DD3182EB27D3E9969891146E9CC0F5C193286CDD3F270BC1939048C55A2453BCD42CD19A9F8D97E539CDD6E6BFE7C5033AF6FAFB3562A102A3A097AFD7CDC542107093E9F12A853A786152587186BFD7AE436F930D3E3842127AD4A3A4B50C657FBC0971BFFEA2B50D96CA3CCBA5FCE92696EFBA932CAA1BE9E25ED31A1CAA49E0C27E7A51C93660D757ED21C4B5C19602503AEE9381FEB88491183747842DE4FA22A70FBD70C446E28EEEC43F8CBC59B082D3EFE2EBDF962F14A67675D7C3AC2FD4CE96AB6FD6C8A2F330E0B40BAEAD9989A3689D7AE393E86D4815DF28E5C9442BBF520A299A3A6647BB1375D24D83D49E3A240F1737079E551C262B936AA7259FED9A302FE276AD9A571F3D865D5467CCD3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0.64705902 0.64705902 0.64705902 sc
q
0 0 282 257 rc
1 0 0 -1 -19 284 cm
28.346457 28.346457 m
283.46457 28.346457 l
283.46457 283.46457 l
28.346457 283.46457 l
h
28.346457 28.346457 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 16.615686 246.65355 cm
/F1.1[ 10 0 0 -10 0 0]sf
-4.2092309 3.8549652 m
(!")[ 2.950000 0.000000 ] xS
[] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
91.164406 131.81647 m
28.346457 131.81647 l
77.869736 131.81647 l
S
0 i
CM
76.164406 152.18353 m
72.164406 153.68353 l
72.164406 150.68353 l
h
76.164406 152.18353 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
95.164406 131.81647 m
91.164406 130.31647 l
91.164406 133.31647 l
h
95.164406 131.81647 m
S
1 J
1 j
0.60000002 i
181.77353 146.31133 m
277.56458 146.31133 l
S
0 i
CM
262.56458 137.68867 m
258.56458 139.18867 l
258.56458 136.18867 l
h
262.56458 137.68867 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 146.31133 m
277.56458 144.81133 l
277.56458 147.81133 l
h
281.56458 146.31133 m
S
1 J
1 j
0.60000002 i
154.29929 197.33495 m
277.56458 197.33495 l
S
0 i
CM
262.56458 86.665054 m
258.56458 88.165054 l
258.56458 85.165054 l
h
262.56458 86.665054 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 197.33495 m
277.56458 195.83495 l
277.56458 198.83495 l
h
281.56458 197.33495 m
S
1 J
1 j
0.60000002 i
181.77353 246.39612 m
277.56458 246.39612 l
S
0 i
CM
262.56458 37.603878 m
258.56458 39.103878 l
258.56458 36.103878 l
h
262.56458 37.603878 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 246.39612 m
277.56458 244.89612 l
277.56458 247.89612 l
h
281.56458 246.39612 m
S
0.82890397 0.87453902 0.93533999 sc
CM
78.032104 222.0739 m
101.58147 222.0739 l
101.58147 182.82495 l
78.032104 182.82495 l
h
78.032104 222.0739 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
97.032104 61.926105 m
120.58147 61.926105 l
120.58147 101.17504 l
97.032104 101.17504 l
h
97.032104 61.926105 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
162.77353 182.82495 m
162.77353 222.0739 l
143.14906 214.22411 l
143.14906 190.67474 l
h
162.77353 182.82495 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
181.77353 101.17504 m
181.77353 61.926105 l
162.14906 69.775894 l
162.14906 93.325256 l
h
181.77353 101.17504 m
S
186.41708 42.346184 m
178.729 42.322491 171.9613 42.301636 171.9613 42.301636 c
171.9613 42.301636 171.8535 53.524715 171.86461 65.889679 c
S
187.67216 82.285286 m
193.4518 82.285286 201.39801 82.285286 201.39801 82.285286 c
S
0 i
CM
164.67354 201.71472 m
168.67354 200.21472 l
168.67354 203.21472 l
h
164.67354 201.71472 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
183.67354 82.285286 m
187.67354 83.785286 l
187.67354 80.785286 l
h
183.67354 82.285286 m
S
/Cs2 SC
0 sc
1 0 0 -1 188.2722 206.02301 cm
/F2.1[ 8 0 0 -8 0 0]sf
-14.384615 2.8880005 m
(!"#$"%#&')[ 4.296000 4.144000 4.000000 4.448000 4.144000 2.520000 4.000000 4.744000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
187.67216 91.116295 m
193.4518 91.116295 201.39801 91.116295 201.39801 91.116295 c
S
0 i
CM
164.67354 192.8837 m
168.67354 191.3837 l
168.67354 194.3837 l
h
164.67354 192.8837 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
183.67354 91.116295 m
187.67354 92.616295 l
187.67354 89.616295 l
h
183.67354 91.116295 m
S
1 J
1 j
0.60000002 i
187.67216 64.62326 m
193.4518 64.62326 201.39801 64.62326 201.39801 64.62326 c
S
0 i
CM
164.67354 219.37674 m
168.67354 217.87674 l
168.67354 220.87674 l
h
164.67354 219.37674 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
183.67354 64.62326 m
187.67354 66.12326 l
187.67354 63.12326 l
h
183.67354 64.62326 m
S
/Cs2 SC
0 sc
1 0 0 -1 180.31067 224.88458 cm
-6.4230771 2.8880005 m
(&'\(\))[ 4.744000 4.296000 4.800000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
187.67216 73.454277 m
193.4518 73.454277 201.39801 73.454277 201.39801 73.454277 c
S
0 i
CM
164.67354 210.54573 m
168.67354 209.04573 l
168.67354 212.04573 l
h
164.67354 210.54573 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
183.67354 73.454277 m
187.67354 74.954277 l
187.67354 71.954277 l
h
183.67354 73.454277 m
S
1 J
1 j
0.60000002 i
162.14906 81.550575 m
126.48147 81.550575 l
S
0 i
CM
103.48147 202.44943 m
107.48147 200.94943 l
107.48147 203.94943 l
h
103.48147 202.44943 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
122.48147 81.550575 m
126.48147 83.050575 l
126.48147 80.050575 l
h
122.48147 81.550575 m
S
1 J
1 j
0.60000002 i
97.032104 81.550575 m
55.930397 81.550575 l
34.246456 81.550575 l
S
0 i
CM
11.246456 202.44943 m
15.246456 200.94943 l
15.246456 203.94943 l
h
11.246456 202.44943 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
30.246456 81.550575 m
34.246456 83.050575 l
34.246456 80.050575 l
h
30.246456 81.550575 m
S
0.82890397 0.87453902 0.93533999 sc
CM
139.22417 106.28952 m
162.77353 106.28952 l
162.77353 67.040581 l
139.22417 67.040581 l
h
139.22417 106.28952 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
158.22417 177.71048 m
181.77353 177.71048 l
181.77353 216.95941 l
158.22417 216.95941 l
h
158.22417 177.71048 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
139.22417 57.228348 m
162.77353 57.228348 l
162.77353 17.979408 l
139.22417 17.979408 l
h
139.22417 57.228348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
158.22417 226.77165 m
181.77353 226.77165 l
181.77353 266.0206 l
158.22417 266.0206 l
h
158.22417 226.77165 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
139.22417 157.31314 m
162.77353 157.31314 l
162.77353 118.0642 l
139.22417 118.0642 l
h
139.22417 157.31314 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
158.22417 126.68686 m
181.77353 126.68686 l
181.77353 165.93579 l
158.22417 165.93579 l
h
158.22417 126.68686 m
S
30.161167 246.39612 m
152.32417 246.39612 l
S
0 i
CM
137.32417 37.603878 m
133.32417 39.103878 l
133.32417 36.103878 l
h
137.32417 37.603878 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
156.32417 246.39612 m
152.32417 244.89612 l
152.32417 247.89612 l
h
156.32417 246.39612 m
S
1 J
1 j
0.60000002 i
152.32417 197.33495 m
30.161167 197.33495 l
S
0 i
CM
137.32417 86.665054 m
133.32417 88.165054 l
133.32417 85.165054 l
h
137.32417 86.665054 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
156.32417 197.33495 m
152.32417 195.83495 l
152.32417 198.83495 l
h
156.32417 197.33495 m
S
1 1 1 sc
CM
83.332184 36.438263 m
80.2155 37.645321 81.9104 46.446503 86.89035 44.688164 c
87.502769 47.613159 93.356117 46.848511 93.197441 44.381016 c
97.036087 47.359917 101.4384 40.832912 98.126053 37.828381 c
101.84158 36.11256 97.601883 28.049299 94.558472 29.578941 c
94.197678 27.293993 88.597855 26.760944 88.260788 29.88563 c
84.950775 26.727339 78.63311 32.138893 83.332184 36.438263 c
h
83.332184 36.438263 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
102.33218 247.56174 m
99.2155 246.35468 100.9104 237.5535 105.89035 239.31184 c
106.50277 236.38684 112.35612 237.15149 112.19744 239.61899 c
116.03609 236.64008 120.4384 243.16708 117.12605 246.17162 c
120.84158 247.88744 116.60188 255.9507 113.55847 254.42107 c
113.19768 256.70599 107.59785 257.23904 107.26079 254.11436 c
103.95078 257.27267 97.63311 251.86111 102.33218 247.56174 c
h
102.33218 247.56174 m
S
0 i
1 1 1 sc
CM
82.909203 85.611023 m
79.737495 86.665054 81.002296 95.538254 86.061874 94.024231 c
86.531296 96.975555 92.414909 96.496521 92.376442 94.024231 c
96.065643 97.186317 100.78023 90.881172 97.617943 87.719086 c
101.41253 86.18602 97.570061 77.926079 94.455849 79.305878 c
94.206619 77.006088 88.639351 76.201286 88.150703 79.305878 c
84.99823 75.990326 78.42482 81.088173 82.909203 85.611023 c
h
82.909203 85.611023 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
101.9092 198.38898 m
98.737495 197.33495 100.0023 188.46175 105.06187 189.97577 c
105.5313 187.02444 111.41491 187.50348 111.37644 189.97577 c
115.06564 186.81367 119.78023 193.11882 116.61794 196.28091 c
120.41253 197.81398 116.57006 206.07391 113.45585 204.69412 c
113.20662 206.99391 107.63935 207.79872 107.1507 204.69412 c
103.99823 208.00967 97.42482 202.91183 101.9092 198.38898 c
h
101.9092 198.38898 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 52.160961 136.93591 cm
-16.481966 2.8880005 m
(*%#$"%#&')[ 4.000000 2.520000 4.000000 4.448000 4.144000 2.520000 4.000000 4.744000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
93.498962 152.19867 m
76.407661 152.19867 l
88.205544 152.19867 l
S
0 i
CM
78.498962 131.80133 m
74.498962 133.30133 l
74.498962 130.30133 l
h
78.498962 131.80133 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
97.498962 152.19867 m
93.498962 150.69867 l
93.498962 153.69867 l
h
97.498962 152.19867 m
S
/Cs2 SC
0 sc
1 0 0 -1 50.833443 147.3826 cm
-17.112888 2.8880005 m
(!"#$"%#&')[ 4.296000 4.144000 4.000000 4.448000 4.144000 2.520000 4.000000 4.744000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
93.577705 141.62871 m
76.486397 141.62871 l
88.284279 141.62871 l
S
0 i
CM
78.577705 142.37129 m
74.577705 143.87129 l
74.577705 140.87129 l
h
78.577705 142.37129 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
97.577705 141.62871 m
93.577705 140.12871 l
93.577705 143.12871 l
h
97.577705 141.62871 m
S
1 J
1 j
0.60000002 i
119.90656 146.31133 m
152.32417 146.31133 l
S
0 i
CM
137.32417 137.68867 m
133.32417 139.18867 l
133.32417 136.18867 l
h
137.32417 137.68867 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
156.32417 146.31133 m
152.32417 144.81133 l
152.32417 147.81133 l
h
156.32417 146.31133 m
S
/Cs2 SC
0 sc
1 0 0 -1 241.11244 42.398243 cm
-19.896 2.8880005 m
(+,#-.--/!)[ 1.776000 2.368000 4.000000 4.744000 4.448000 4.744000 4.744000 1.776000 0.000000 ] xS
1 0 0 -1 245.26628 91.635635 cm
-14.705846 2.8880005 m
(+,#+$*%0)[ 1.776000 2.368000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
1 0 0 -1 248.03551 142.65926 cm
-11.107077 2.8880005 m
(+,#&')[ 1.776000 2.368000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 189.22478 241.58661 cm
-16.807692 2.8880005 m
(1/.*23435%6//)[ 4.592000 1.776000 4.448000 4.000000 4.448000 2.224000 2.664000 2.224000 5.184000 2.520000 4.296000 1.776000 0.000000 ] xS
1 0 0 -1 26.559143 42.574459 cm
-8.1538458 2.8880005 m
(&60'!/)[ 4.744000 4.296000 2.520000 4.296000 4.296000 0.000000 ] xS
1 0 0 -1 35.559143 92.440643 cm
-17.153847 2.8880005 m
(&60'!/#76/+8)[ 4.744000 4.296000 2.520000 4.296000 4.296000 1.776000 4.000000 4.000000 4.296000 1.776000 1.776000 0.000000 ] xS
1 0 0 -1 32.097603 157.16815 cm
-13.692307 2.8880005 m
(&60'!/#&')[ 4.744000 4.296000 2.520000 4.296000 4.296000 1.776000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 187.5799 197.0452 cm
-13.692307 2.8880005 m
(*%#$"%#&')[ 4.000000 2.520000 4.000000 4.448000 4.144000 2.520000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 180.31067 216.02116 cm
-6.4230771 2.8880005 m
(&'\(9)[ 4.744000 4.296000 4.800000 0.000000 ] xS
1 0 0 -1 31.059143 207.68747 cm
-12.653846 2.8880005 m
(+,#$"%#&')[ 1.776000 2.368000 4.000000 4.448000 4.144000 2.520000 4.000000 4.744000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
80.350761 157.31314 m
80.350761 118.0642 l
99.975235 125.91399 l
99.975235 149.46336 l
h
80.350761 157.31314 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
99.350761 126.68686 m
99.350761 165.93579 l
118.97523 158.08601 l
118.97523 134.53664 l
h
99.350761 126.68686 m
S
281.50211 171.82314 m
78.188652 171.82314 l
78.188652 162.01089 l
93.45076 162.01089 l
S
0 i
CM
78.45076 121.9891 m
74.45076 123.4891 l
74.45076 120.4891 l
h
78.45076 121.9891 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
97.45076 162.01089 m
93.45076 160.51089 l
93.45076 163.51089 l
h
97.45076 162.01089 m
S
/Cs2 SC
0 sc
1 0 0 -1 230.08209 118.17596 cm
-27.39366 2.8880005 m
(&8#-06$'2#&')[ 4.744000 4.744000 4.000000 4.744000 2.664000 4.296000 4.448000 4.296000 4.448000 4.000000 4.744000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
199.25133 171.82314 m
199.25133 163.92314 l
199.21593 151.81129 l
204.7159 151.79523 204.68373 140.79527 199.18376 140.81136 c
199.07935 105.09994 l
199.07935 99.075813 l
187.67195 99.075813 l
S
0 i
CM
164.67302 184.83145 m
168.70673 183.42459 l
168.63718 186.42378 l
h
164.67302 184.83145 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
183.67302 99.168549 m
187.70673 100.57541 l
187.63718 97.576218 l
h
183.67302 99.168549 m
S
ep
end
%%Trailer
%%EOF
