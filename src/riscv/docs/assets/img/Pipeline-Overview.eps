%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 342.000000 293.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A365) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 342 293
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 342 293
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /L put
dup 34 /o put
dup 35 /a put
dup 36 /d put
dup 37 /space put
dup 38 /S put
dup 39 /t put
dup 40 /r put
dup 41 /e put
dup 42 /M put
dup 43 /u put
dup 44 /l put
dup 45 /i put
dup 46 /p put
dup 47 /A put
dup 48 /U put
dup 49 /B put
dup 50 /n put
dup 51 /c put
dup 52 /h put
dup 53 /W put
dup 54 /k put
dup 55 /I put
dup 56 /s put
dup 57 /D put
dup 58 /P put
dup 59 /hyphen put
dup 60 /F put
dup 61 /R put
dup 62 /g put
dup 63 /C put
dup 64 /H put
dup 65 /E put
dup 66 /f put
dup 67 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








03003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 37 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/A 3 def
/B 4 def
/C 5 def
/D 6 def
/E 7 def
/F 8 def
/H 9 def
/I 10 def
/L 11 def
/M 12 def
/P 13 def
/R 14 def
/S 15 def
/U 16 def
/W 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/g 23 def
/h 24 def
/i 25 def
/k 26 def
/l 27 def
/n 28 def
/o 29 def
/p 30 def
/r 31 def
/s 32 def
/t 33 def
/u 34 def
/x 35 def
/uni2B91 36 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9316BECA57231A7CB682134460003F1A5A5A2E37208486F0FD1BC1AF830B7C93F21790FC74DC9F7A90C92F50457BDC89F8F2420C9548960BA1DE47A50D07F1EAF53F012AFC6574CA0B2EFD7E9C9250AEBC0FF8CC03F982B96D30E00509FE5BE4ECDA9C6F572629E9BCDDCF5D25B502BFA327EFE9A32D8D8A37070F913FE7B43FBEE91048E5A13A83C48B4F0DB2425B9B1B3B09B53DD0B7A8130740163EFDE0D20D20F2729FB9659C6D873CB0FFB73F397A0CED52250D7EB0190579F4208B5406DA635394E22D0204C2F4932F0E5F6B65FE2AB8DDA976E813D247314EC554725A92C68BB70719CB35ECD1132B6D6A243C98E1108B3B4570915A50391FC704B8CD37B83BE4D6451222445F97D5A90AADBC3197553B28FE08534E5CEC73739F09683F14479390E691D981BE0835C56AA3CE1A90C4374C782039AEBB300B6A62218F3732E3A50CD80D64A8C0D0AFE93471970D8D6B9485EA449081045564FAF9816F2798CC33067ADD98D3427A6232981E8AF46FD94E6AD2D7AB2787D6B9B811A6E5536732A2C9CF8758ABB177D845BB555647A217170758F46B57B8F8491A6DAA898AC7A093E787D6C923477696C9047F1D7646F663AFE9FBE22F929F34BB9945AB9A8F995CDF58C1AA54BBDAF045DDDD10E9B37945665A7728140637B528E0BC94F93253A204B2983EEFC0F532A95EC2F5EF45FFE31EEFF0C4F6D6A8EDFC1EEE312DD23F6DE29ED61AA94DFAF8C55DB6F2517AF85249D7E75AD1C9AD20BA5F3DE50D
A8773878BA85FF3E4AA015CE85683B518BE06566859C0C87780DE1741A44073590C737F54D7C70CF88E3CDF1E15104EA84D0279D7244284ACD372511F5538236129C1B5F2C019C259069940EB53FEB88F040B73FFBF24110F6F51F97DABA836FAEC4727EFBDA775FB5D2519BC066AA0DB4E4BF8462B5E56B0242F5AA98A55DFD0B971F5C6DC939A5B1F4644CC9752598559941D58A5B9329DF3D28808BB1872AB2ABF9DBFA2C047A3FE685AB2EA6A52F96D6749B1E9911B3813081430DC034AF15E9F6ADB7462A3B7F0CCEFCD0AFBBA6934CDAD638C631D064C02A581A4E378207A16C6ECB5B3DFA443625BAB860C44F247B95F5FDEAEFD89FF9A00E76E7F9929282BC49440694E4D85666864715838F23D58529F586BE00429DA622F0CB5128C8428F2D3267396FB51A6DCDCD8702D435B74AF07009E128192C641593FFF81553F6AA1E71D5ABD5FEF31CC68AB42001A727D49DB1CA8860F84A55C0919E5EAA6C73B491614EB92381C89DAFADE20A8BF3D4039E2D92FFA1F2428B93A6056D0E766E8300440DBD2DC78BD1F1FEF1DB23852BBE88CF4019CC563180FD48F3B76CFFA1634D510209F6F09D686CE9E6121B10F4DECFB0AB11EC805BA569CB458078A6C93D67572DD3BB90BF270C69DF03D165226ABFB8098E1594EC87CC530F1539FA44730AED7479EB2BEAB93FF915A81DBFDF0599EB6C60260A2466B3A05FA299FA7AFD788A7243AB8FA7236D0902D3430B9B9207088F217C8EB1D18DCE9C4E9578D84153604DB60072A1DB86451D3D7510CE1342A6E2F36AC18FA6BEEC00DE3D13630964ED5A1D998196B9CA2997FB6A81929793892B7178CCD869B3DC1ABC43DB60EB713969B76D4664532AF2D5FFE1DBEB9774879A7EFA24144A91D319440474637A0671C3CFF0166D30629DC93650D85902C881120C6EC87EB56131F5CE325F7CDCF2AB0397C9DBB2B7CDB7F88246C248FD72E2F4D1742500BDBF393D981587A837B027185315EDCC22717304C6EED1404217A6E726FF8B635161C8BE3BA87A2D14732398DF71625A343280F9058193669FDDA3A70324E7B810FA2B817A7870FDF88AB9AF1F9E34F5F3047557A6431E194F111849F97C617D6BB3720057E218BE6D5BE8BAC0D309B6027EBCC19880D6D2219DAC3947E705878390BC57DA79C466E08990DC21193AD61EEE5419F981552DBE5AD9BD96190C51A9771112AAC77CEF99A0DD343CECBFAF2C4265CEFB41BE33F99487FBC533994C737E092EABEE86FA2059CFD1E646AC11D9733A600E78E3943BE63A27EB1E8EC21FF9114B436AC64BD74F2AF5A44118E300B3D75F7AC524F6D45EB4038DBF2F7F60F4B23CDB83FEFEEA79EF7BD3E8AB4B11B449FF0924611CDA33F0820C6FC3CFEF6A8226F4771A00A3C0439DD476FBABEFABA1D4ECCC6357C32E132EE5159BDE81E5E29C4684

EB8AE51BF917A256B6E133BCBBE0EDFA1C97EBD3238E9938F15A7B5084D608D667B81D384B4CBDD57FDDDD3D2CA427A5D914FC06640B94C0B4E47B7E698BB17CDE014D75726959F9BA5811FD7A4B13A9BC5D91458AC7421B420A9F97DCD3BE0953A57CB229453352202333D50F7B60944190581E5877F753AB2CFF2E0C0E94D443E6F8C4C476300B68DE16A0D02A89EBD06A44DBB1951CD9335C1015983197D48E228AC58B7DFDC69C5CABE32EEB197A66651E16B0B52EBC996056E8530F9B3ABBE20138C59413746D585BFC66CC54375C69A09A758449B35E17E228A306F4092E0047581B1C9A8FAF622B5A81EADF40561D38A76F95E1DE440C777871575CBE8AC8F71124146B4838D6EE2290B578F9F9F676FC68F81C0C2A739C1418B867C3E61BA4ABA3769CEA1F6980601C5C6D1447D913987CCC27DD9284A308C70E10307CC152E47B97A16598EF847E22E68945B4CFE02909E9F6BD560B1884E57D94B5666CAE70D8591C875E219EF92FFD8204A25DC0246DA7A5BE735496A01B492FD13CAD936EF87CD18EFCEBE160910DF1751D91233356612F428804E2CBDCFF6842FD5AF9B66EEA5C1D2A7A4430AAE417443B1358D7D9B71EEAE0EDCB673958AE4DFB84D95F33B0F8FDD294D344774743A4E63FE04CE276F1AAB48213370058B04641456E47B3586CCDA1B49833D35DDD13F094E10D800D9EE43A4F1D7655B97B4A504DE0AF8096443907D73161657DFE79D7464319B89C2575BD94FE22DFB7A1CB4B8AFCEAC8E412F65333C2D5487DB3CCBB6CDC15F67799B8057DDC443A780D149FA62E63F126D3C743CA64EB633254598C1D72774435789C188DBC0BCF90C8B12B84C4911456D39ACE70DD285CC7B6CB5ACD85435AEDB25EBC43A894BF5BAA5CB11CCA1E9821A9843B5AD0A2DFDC4A59AD1E198276913C3D6A3D6AFB3F9C0AAE1802DEC8699DA1983927EEFDAABF0641105C40C235297912364E194045E6462596FB9067EE35D04F9827252F0B004C908CD56E91FE9F9DF31CB173772A9C1EB9101BE5DB2D2C0E87E88B925E5F9538744466BADE028B20DFB9F58009C72F6F47746D18A23043DBF4102344DF1A983C0E6057E0A30F5F3FFD9FF7B6D3F97C01CEEA87D80F499BCC8FEDD38726572869873E5E81F8AD2D349722740EF28856DC293DB25ADA381FDB8B5CC280A11EFD6D3E038179110E3536CA80E4EFCCC04276E34FBAE3B316E596550D1B86C851DD824D77202E85F7BA0CA6908EF3911E45B56418FA78BA3BD156836CA94FFF22ECCD26F79544C003837AFBD84C07DC4FDEA381ABF4DA17EC25A7A0BC9A4EE1D63CE096C5671F1C27CAC8B72E844F3889BC1A9852C392CEF41D0C82E180865B808D993C757855AE537D5433AA69F1C69BEF7B1CF7ECA512C1B307E92EF2A6B188B5338C44C627A7515EE7493088227BFF309DBD

4A68A71655B01C98283FF6BB94874E6F07E5604EAF838F3327830C149B89DB042CEBD399F19BA8EA43DC276CE212BE85D4F88C813F21C0435D59F3CDE452D3F46C37ECE53A1B925C301C52125212C6C0773F01EFE292375BE246443C5E37255438691E868BB935B334098107EDB393FCCDCBFA35F881C29549D104EAE8AE2A4BCE6DB9A9408C100D20A9F0BC09360A9C326CC0DD1806B746494AD4AB1651FB89C297BE27716CAF4CD07B5A14E11D15398F516A939C8BF7CFEED0ED0FAD7E95B1E5C0FD62DEE843D8231C642370B89B743DB26ABA4037939376F811D6BB76CA6F62B1C67BF5948F848661D605FC2977F32214C3EA9736F75F82BB866047296237BF7E25A537E9C14A803D26C75B2B79090DE03AE5B4E94052DE18A31B9CB543FA633FD27B92EAEEB56620903437FF199F81918D19218615B916DB1768615BA03B8CCC20B52A3397E47B866F2F8FA3E8F31EA6F14D582F9F44DA0F4859E9A691B30F5421B058B33AFDD54836FF5ED153D4B64DED9B4835EC0FDC898A0275462AF768DDA538519E016D64BCA3CD45D3EAEC66C741C609CAFD3E3CE3DC315F11BBE8A9995A1CB39F79D02CA13990224E3AB1245BE847FE31332B820DAD207FA99FBAF1CF74766128725BD4BBD61CCCDDF8496D21F2EDA0F235230C942A2120B929D8D67F59B3CF79DACDFAC8A6AA7DE58101617C7B5B4FF02363A61F8BFDCE28E7E8822373A8829155B4CE34437E7FD43A77BB344A37463DCAEE95DF35AF4806A91667E10219673E909138A2BF4C1B92037A165D22D5F32468BE7B52F630ED43CBDEE0E44D2833851ABABCE0CBC848E2B24ABABB9BAEAE3F8F179E3A2A1765044987A16C54805C66286FAFC42F490509EFA6A869D2487C715D99970208941CF47A1E309A41C4354524318005EE1C1B5698281323AF1421481BC2177E182B737F37CC5C24073D7DA8E0EDCAF00B9CACBAFEFCB97E1B4EBA01AF5F7040CBADD96D9A68858AEE9A82C1D4AD85C9276E9B83D4D32CFA2905DFD71FF578A1FA0AECB9C13433A962EFA7F032608A5CA19D8B9A7F73F3158D0577D6B7F7A0A81DE9ADC64C7FC38EF98C10E55CC6AF2D444E5E323838A83788E6F40F11FA9F6AE782CD4FE99772FB46D691829CAA3D20AA3CD736C0A79FDD0774271F25F89FA5D0DEBB0D97E46FA38F65E71C9E58B2087BFE7AD8A913CDC49F40
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 342 293 rc
1 0 0 -1 10 319 cm
129.23219 204.69426 m
139.48621 204.69426 l
S
0 i
CM
153.48621 114.30574 m
149.48621 115.80574 l
149.48621 112.80574 l
h
153.48621 114.30574 m
f
0 J
0 j
1 0 0 -1 10 319 cm
143.48621 204.69426 m
139.48621 203.19426 l
139.48621 206.19426 l
h
143.48621 204.69426 m
S
0.82890397 0.87453902 0.93533999 sc
CM
284.61841 227.38391 m
284.61841 1.22758 l
236.15633 1.22758 l
236.15633 227.38391 l
h
284.61841 227.38391 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
274.61841 91.616096 m
274.61841 317.77243 l
226.15633 317.77243 l
226.15633 91.616096 l
h
274.61841 91.616096 m
S
0 i
1 1 1 sc
CM
271.86905 55.362789 m
271.86905 8.3663607 l
247.13319 8.3663607 l
247.13319 55.362789 l
h
271.86905 55.362789 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
261.86905 263.63721 m
261.86905 310.63364 l
237.13319 310.63364 l
237.13319 263.63721 l
h
261.86905 263.63721 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 259.50113 31.864574 cm
/F1.1[ 8 0 0 -8 0 0]sf
-9.04 -2.223999 m
(!"#$%)[ 4.448000 4.592000 4.296000 4.744000 0.000000 ] xS
-9.5559998 8 m
(&'"\(\))[ 5.184000 2.520000 4.592000 2.520000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
271.86905 164.67865 m
271.86905 117.68221 l
247.13319 117.68221 l
247.13319 164.67865 l
h
271.86905 164.67865 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
261.86905 154.32135 m
261.86905 201.31778 l
237.13319 201.31778 l
237.13319 154.32135 l
h
261.86905 154.32135 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 259.50113 141.18044 cm
-16.372 2.8880005 m
(*+,'-.,-\)\()[ 6.968000 4.448000 1.776000 2.520000 1.776000 4.744000 1.776000 1.776000 4.296000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
271.86905 110.05039 m
271.86905 63.053963 l
247.13319 63.053963 l
247.13319 110.05039 l
h
271.86905 110.05039 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
261.86905 208.9496 m
261.86905 255.94603 l
237.13319 255.94603 l
237.13319 208.9496 l
h
261.86905 208.9496 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 259.50113 86.552177 cm
-7.704 2.8880005 m
(/!0)[ 5.184000 4.448000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
272.53494 219.3069 m
272.53494 172.31047 l
247.79909 172.31047 l
247.79909 219.3069 l
h
272.53494 219.3069 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
262.53494 99.693108 m
262.53494 146.68953 l
237.79909 146.68953 l
237.79909 99.693108 l
h
262.53494 99.693108 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 260.16699 195.80869 cm
-12.816 2.8880005 m
(1\(#234)[ 5.480000 2.664000 4.296000 4.448000 4.296000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
325.50827 227.38391 m
325.50827 1.22758 l
300.77243 1.22758 l
300.77243 227.38391 l
h
325.50827 227.38391 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
315.50827 91.616096 m
315.50827 317.77243 l
290.77243 317.77243 l
290.77243 91.616096 l
h
315.50827 91.616096 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 313.14035 114.30574 cm
-19.483999 2.8880005 m
(5\(-'\)%1#36)[ 7.264000 2.664000 1.776000 2.520000 4.296000 2.224000 5.480000 4.296000 4.296000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
219.23911 162.76781 m
219.23911 65.843674 l
194.50327 65.843674 l
194.50327 162.76781 l
h
219.23911 162.76781 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
209.23911 156.23219 m
209.23911 253.15633 l
184.50327 253.15633 l
184.50327 156.23219 l
h
209.23911 156.23219 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 206.87119 114.30574 cm
-33.931999 2.8880005 m
(728'\(+3'-"2%9\)3"$\))[ 2.072000 4.448000 4.000000 2.520000 2.664000 4.448000 4.296000 2.520000 1.776000 4.592000 4.448000 2.224000 5.632000 4.296000 4.296000 4.592000 4.744000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
179.61725 162.76781 m
179.61725 65.843674 l
154.88139 65.843674 l
154.88139 162.76781 l
h
179.61725 162.76781 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
169.61725 156.23219 m
169.61725 253.15633 l
144.88139 253.15633 l
144.88139 156.23219 l
h
169.61725 156.23219 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 167.24931 114.30574 cm
-18.892 -2.223999 m
(728'\(+3'-"2)[ 2.072000 4.448000 4.000000 2.520000 2.664000 4.448000 4.296000 2.520000 1.776000 4.592000 0.000000 ] xS
-21.040001 8 m
(:\(\);$\)3"$\))[ 5.184000 2.520000 4.296000 3.112000 4.744000 4.296000 4.296000 4.592000 4.744000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
139.737 162.76781 m
139.737 65.843674 l
115.00115 65.843674 l
115.00115 162.76781 l
h
139.737 162.76781 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
129.737 156.23219 m
129.737 253.15633 l
105.00115 253.15633 l
105.00115 156.23219 l
h
129.737 156.23219 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 127.36908 114.30574 cm
-30.08 2.8880005 m
(728'\(+3'-"2%<\)'34)[ 2.072000 4.448000 4.000000 2.520000 2.664000 4.448000 4.296000 2.520000 1.776000 4.592000 4.448000 2.224000 4.592000 4.296000 2.520000 4.296000 0.000000 ] xS
/Cs1 SC
0.75 1 0.75 sc
CM
272.93558 292 m
272.93558 245.00357 l
248.19972 245.00357 l
248.19972 292 l
h
272.93558 292 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
262.93558 27 m
262.93558 73.996429 l
238.19972 73.996429 l
238.19972 27 l
h
262.93558 27 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 260.56766 268.5018 cm
-14.812 -2.223999 m
(=\)>-8'\)\(%)[ 5.480000 4.296000 4.592000 1.776000 4.000000 2.520000 4.296000 2.664000 0.000000 ] xS
-6.2199998 8 m
(<-,\))[ 4.592000 1.776000 1.776000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
98.083939 133.5123 m
98.083939 86.515877 l
74.616096 86.515877 l
74.616096 133.5123 l
h
98.083939 133.5123 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
88.083939 185.4877 m
88.083939 232.48413 l
64.616096 232.48413 l
64.616096 185.4877 l
h
88.083939 185.4877 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 86.350014 110.01409 cm
-14.736 2.8880005 m
(7?/?@A)[ 2.072000 5.776000 5.184000 5.776000 5.776000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
58.966885 133.5123 m
58.966885 86.515877 l
34.231033 86.515877 l
34.231033 133.5123 l
h
58.966885 133.5123 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
48.966885 185.4877 m
48.966885 232.48413 l
24.231035 232.48413 l
24.231035 185.4877 l
h
48.966885 185.4877 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 46.598961 110.01409 cm
-6.9640002 -2.223999 m
(1+8%)[ 5.480000 4.448000 4.000000 0.000000 ] xS
-15.628 8 m
(72'\)\(B#3\))[ 2.072000 4.448000 2.520000 4.296000 2.664000 2.368000 4.296000 4.296000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 10 319 cm
315.50827 204.69426 m
331.15747 204.69426 l
331.15747 50.498215 l
270.83557 50.498215 l
268.83557 50.498215 l
S
0 i
CM
274.83557 268.5018 m
278.83557 267.0018 l
278.83557 270.0018 l
h
274.83557 268.5018 m
f
0 J
0 j
1 0 0 -1 10 319 cm
264.83557 50.498215 m
268.83557 51.998215 l
268.83557 48.998215 l
h
264.83557 50.498215 m
S
1 J
1 j
0.60000002 i
209.23911 204.69426 m
220.25633 204.69426 l
S
0 i
CM
234.25633 114.30574 m
230.25633 115.80574 l
230.25633 112.80574 l
h
234.25633 114.30574 m
f
0 J
0 j
1 0 0 -1 10 319 cm
224.25633 204.69426 m
220.25633 203.19426 l
220.25633 206.19426 l
h
224.25633 204.69426 m
S
1 J
1 j
0.60000002 i
274.61841 204.69426 m
284.87241 204.69426 l
S
0 i
CM
298.87241 114.30574 m
294.87241 115.80574 l
294.87241 112.80574 l
h
298.87241 114.30574 m
f
0 J
0 j
1 0 0 -1 10 319 cm
288.87241 204.69426 m
284.87241 203.19426 l
284.87241 206.19426 l
h
288.87241 204.69426 m
S
1 J
1 j
0.60000002 i
169.61725 204.69426 m
178.60326 204.69426 l
S
0 i
CM
192.60326 114.30574 m
188.60326 115.80574 l
188.60326 112.80574 l
h
192.60326 114.30574 m
f
0 J
0 j
1 0 0 -1 10 319 cm
182.60326 204.69426 m
178.60326 203.19426 l
178.60326 206.19426 l
h
182.60326 204.69426 m
S
1 J
1 j
0.60000002 i
48.966885 220.73502 m
58.716095 220.73502 l
S
0 i
CM
72.716095 98.264984 m
68.716095 99.764984 l
68.716095 96.764984 l
h
72.716095 98.264984 m
f
0 J
0 j
1 0 0 -1 10 319 cm
62.716095 220.73502 m
58.716095 219.23502 l
58.716095 222.23502 l
h
62.716095 220.73502 m
S
1 J
1 j
0.60000002 i
88.083939 220.73502 m
99.10128 220.80878 l
S
0 i
CM
113.1012 98.164444 m
109.11133 99.691185 l
109.09124 96.691254 l
h
113.1012 98.164444 m
f
0 J
0 j
1 0 0 -1 10 319 cm
103.1012 220.83556 m
99.111328 219.30881 l
99.09124 222.30875 l
h
103.1012 220.83556 m
S
1 J
1 j
0.60000002 i
18.331099 220.7626 m
0 220.84828 l
S
0 i
CM
32.331055 98.256104 m
28.324089 99.737389 l
28.33811 96.737419 l
h
32.331055 98.256104 m
f
0 J
0 j
1 0 0 -1 10 319 cm
22.331057 220.7439 m
18.324089 219.26262 l
18.33811 222.26257 l
h
22.331057 220.7439 m
S
1 J
1 j
0.60000002 i
24.231035 196.61725 m
5.8999357 196.70293 l
S
0 i
CM
11.89998 122.27837 m
15.906947 120.79709 l
15.892924 123.79706 l
h
11.89998 122.27837 m
f
0 J
0 j
1 0 0 -1 10 319 cm
1.8999792 196.72162 m
5.9069467 198.20291 l
5.8929243 195.20294 l
h
1.8999792 196.72162 m
S
1 J
1 j
0.60000002 i
64.616096 197.2368 m
54.866882 197.2368 l
S
0 i
CM
60.866882 121.7632 m
64.866882 120.2632 l
64.866882 123.2632 l
h
60.866882 121.7632 m
f
0 J
0 j
1 0 0 -1 10 319 cm
50.866882 197.2368 m
54.866882 198.7368 l
54.866882 195.7368 l
h
50.866882 197.2368 m
S
1 J
1 j
0.60000002 i
94.747131 196.61725 m
105.00115 196.61725 l
S
0 i
CM
100.74713 122.38275 m
104.74713 120.88275 l
104.74713 123.88275 l
h
100.74713 122.38275 m
f
0 J
0 j
1 0 0 -1 10 319 cm
90.747131 196.61725 m
94.747131 198.11725 l
94.747131 195.11725 l
h
90.747131 196.61725 m
S
1 1 1 sc
CM
98.083939 55.362789 m
98.083939 8.3663607 l
74.616096 8.3663607 l
74.616096 55.362789 l
h
98.083939 55.362789 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
88.083939 263.63721 m
88.083939 310.63364 l
64.616096 310.63364 l
64.616096 263.63721 l
h
88.083939 263.63721 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 86.350014 31.864574 cm
-14.736 2.8880005 m
(7?/?@A)[ 2.072000 5.776000 5.184000 5.776000 5.776000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
58.966885 55.362789 m
58.966885 8.3663607 l
34.231033 8.3663607 l
34.231033 55.362789 l
h
58.966885 55.362789 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 10 319 cm
48.966885 263.63721 m
48.966885 310.63364 l
24.231035 310.63364 l
24.231035 263.63721 l
h
48.966885 263.63721 m
S
/Cs2 SC
0 sc
0 i
0 -1 -1 0 46.598961 31.864574 cm
-6.9640002 -2.223999 m
(1+8%)[ 5.480000 4.448000 4.000000 0.000000 ] xS
-15.628 8 m
(72'\)\(B#3\))[ 2.072000 4.448000 2.520000 4.296000 2.664000 2.368000 4.296000 4.296000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 10 319 cm
48.966885 298.88452 m
58.716095 298.88452 l
S
0 i
CM
72.716095 20.115467 m
68.716095 21.615467 l
68.716095 18.615467 l
h
72.716095 20.115467 m
f
0 J
0 j
1 0 0 -1 10 319 cm
62.716095 298.88452 m
58.716095 297.38452 l
58.716095 300.38452 l
h
62.716095 298.88452 m
S
1 J
1 j
0.60000002 i
18.331099 298.91211 m
0 298.9978 l
S
0 i
CM
32.331055 20.106586 m
28.324089 21.587873 l
28.33811 18.587906 l
h
32.331055 20.106586 m
f
0 J
0 j
1 0 0 -1 10 319 cm
22.331057 298.8934 m
18.324089 297.41214 l
18.33811 300.41208 l
h
22.331057 298.8934 m
S
1 J
1 j
0.60000002 i
24.231035 274.76675 m
5.8999357 274.85245 l
S
0 i
CM
11.89998 44.12886 m
15.906947 42.647575 l
15.892924 45.647541 l
h
11.89998 44.12886 m
f
0 J
0 j
1 0 0 -1 10 319 cm
1.8999792 274.87115 m
5.9069467 276.35242 l
5.8929243 273.35245 l
h
1.8999792 274.87115 m
S
1 J
1 j
0.60000002 i
64.616096 275.38632 m
54.866882 275.38632 l
S
0 i
CM
60.866882 43.613682 m
64.866882 42.113682 l
64.866882 45.113682 l
h
60.866882 43.613682 m
f
0 J
0 j
1 0 0 -1 10 319 cm
50.866882 275.38632 m
54.866882 276.88632 l
54.866882 273.88632 l
h
50.866882 275.38632 m
S
1 J
1 j
0.60000002 i
88.083939 298.88452 m
231.23318 298.88452 l
S
0 i
CM
245.23318 20.115467 m
241.23318 21.615467 l
241.23318 18.615467 l
h
245.23318 20.115467 m
f
0 J
0 j
1 0 0 -1 10 319 cm
235.23318 298.88452 m
231.23318 297.38452 l
231.23318 300.38452 l
h
235.23318 298.88452 m
S
1 J
1 j
0.60000002 i
93.983932 275.38632 m
237.13319 275.38632 l
S
0 i
CM
99.983932 43.613682 m
103.98393 42.113682 l
103.98393 45.113682 l
h
99.983932 43.613682 m
f
0 J
0 j
1 0 0 -1 10 319 cm
89.983932 275.38632 m
93.983932 276.88632 l
93.983932 273.88632 l
h
89.983932 275.38632 m
S
1 J
1 j
0.60000002 i
196.87119 156.23219 m
196.87119 51.231033 l
196.87119 50.498215 l
230.29973 50.498215 l
232.29973 50.498215 l
S
0 i
CM
246.29973 268.5018 m
242.29973 270.0018 l
242.29973 267.0018 l
h
246.29973 268.5018 m
f
0 J
0 j
1 0 0 -1 10 319 cm
236.29973 50.498215 m
232.29973 48.998215 l
232.29973 51.998215 l
h
236.29973 50.498215 m
S
1 J
1 j
0.60000002 i
250.56766 73.996429 m
250.56766 81.896431 l
250.49678 85.71711 l
S
0 i
CM
260.42261 229.28358 m
261.99652 233.25507 l
258.99704 233.31071 l
h
260.42261 229.28358 m
f
0 J
0 j
1 0 0 -1 10 319 cm
250.42259 89.716423 m
251.99652 85.744926 l
248.99704 85.689293 l
h
250.42259 89.716423 m
S
1 J
1 j
0.60000002 i
237.79909 123.19132 m
202.37119 123.19132 l
202.37119 117.69132 191.37119 117.69132 191.37119 123.19132 c
116.74808 123.19132 l
116.74808 123.92414 l
116.74808 150.33218 l
S
0 i
CM
126.74808 164.66782 m
128.24808 168.66782 l
125.24808 168.66782 l
h
126.74808 164.66782 m
f
0 J
0 j
1 0 0 -1 10 319 cm
116.74808 154.33218 m
118.24808 150.33218 l
115.24808 150.33218 l
h
116.74808 154.33218 m
S
/Cs2 SC
0 sc
0 -1 -1 0 278.785 113.85702 cm
-17.704 2.8880005 m
(AC\)3+'-"2)[ 4.888000 4.144000 4.296000 4.296000 4.448000 2.520000 1.776000 4.592000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
