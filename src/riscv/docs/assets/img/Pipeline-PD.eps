%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 282.000000 257.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A365) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 282 257
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 282 257
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
dup 34 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/D 1 def
/P 2 def
/uni2B90 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4174458 def
currentdict currentfile eexec

3FD8D7031508DC68E3444F52D25AF049F0A43E88E2EEFB790656EAC975696407BB62B3B01E3369EE0F48950C2294E50393D9C58593FD73238EE644ED7C385539EAC0E03CC56BA48DE509ACBA86023186C8A56EA1B84400E5ADF0941CF00B3FDE1D5C319DE25F195E27E846286A58A3CA8F2CD6C2AE7DED1CCB5D9F1661A5B0ACCA719B399DF59142F7558B0A19CA3AF19E90A29D6D6E6501A7781336F5DFCC366F7E75
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /p put
dup 34 /d put
dup 35 /underscore put
dup 36 /b put
dup 37 /u put
dup 38 /l put
dup 39 /e put
dup 40 /i put
dup 41 /n put
dup 42 /s put
dup 43 /t put
dup 44 /r put
dup 45 /c put
dup 46 /f put
dup 47 /a put
dup 48 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/underscore 1 def
/a 2 def
/b 3 def
/c 4 def
/d 5 def
/e 6 def
/f 7 def
/h 8 def
/i 9 def
/l 10 def
/n 11 def
/p 12 def
/r 13 def
/s 14 def
/t 15 def
/u 16 def
/uni2B91 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec

E12B77ECE012A64CE0A4E8FD15ED77609BA25A97C14B5E06413320A71CA42BCBB64E52D2219C126DB83173D85C09C316F3ADE782CEBDB42582DABA010AA31B788E7F778AC19548C797BA94720D46B7835EB380F1B9E6B3B991FE9B30BCFA981BDDDD41B6E3715477BEB82C17DD75FA200D3CE8F111E656787E5E9BCC2BE25D54AF9E68F5750F40BC16CE50D9BEAF6870D31254554CF95769EC07EE6A114AEB8BE8669217A6529224AFC0EEAAA26394D81595C62547B4692F3CF3599FD03982CA4028B491A25E9C8D50AC119B258CDFFBC709C2EB81A0BFAD70364C5BF4BAE83DD84CC9DED81D03E77E114835B945C9F1EF3DF950CB2ED0F44ABFAF16B0A6A39BB63E1D0AD77B81529A7652C93398DD81C0D498E1AC5691CD6998CCCE496097ABA16D6FB4DC9BD6CD707F2C4A23B9C81C733015759ACC62416361BCA8C8FB53BE88C3BFC965E2C377D3DA9F12D99A3246A979EA0F1A4D0F854300EA64F7AD9A471F7AD743C2C204E94B91E0A56629349EDD2866CEEE7155CE2F6E7823A8231E9D44B1191F438D11D19D3B2EB44B3FF98086A43D6D9EFCD021DCC408E2F6855A511B0B670DF3790C7433A96012C07080ACA378385C2E516A59BA6A58D99E15A4226D5F2E02AEFAE9A38D86E600B8C0697AE0DE64EC40DAB863A1F057C0065B186E6320E546EF2D8CDE7C41F14DBB3DBB18CBDA41EF91E61BCAF06FB9B5F941A555F604D17421DC1470279DE64921F5088DCF7A45FE0A7E9D3B86ED4A040595833EEABC75FC9CDB8BC75B4C04EE228ABE43DBC8158BDEEB0AFA6B6CA795E8F625054FBC7303B25D0458E0BEBA57A82F1B2DF80F1C3DF753253763E52CF43FB6B0BC0BE2C9727710226B3E0841FF46BE57BE6651702E08F6A976F23891B037A25771A30F8618BFB0ABE3412736FA852C43626B5A3B69868B3DFA28F39D5536DACE46B3C3A9353F226B5DF732E30962B194C72A43B80A7A707113E0E1343FDA7EBEB540DC25870014266E1AB7ED6A115ACCAB651ED615DC3A40E322AFB1F70E432C95230144E90E870E33EC16AB609130194C9F55CD6DCAB05D6ACF1FBED9568D396DA821FCC0C549217A2E61755F74D40860A8D7D2492A29B2144A12A959C045434CC3802C48D342EE15474CB2CB243C790A5C0864B508C425240265BADB444BE5BE672F0C45D34A9B14E9D0727130DE547C0535DEE593964037CA5F88587CD0157E866A37050B3311D70A9EF167A0A6405E4905064243EF321BCAF70D04E086C804B0FE1869379988BFA2A85F1F9E968BDB7E7ABEF81D637CD6F0B6893D5CF621EFCB02893EC4A7B1B6AB25ACF20CC9B8EB05D680A7FEEE423C8A76AA88DD116AE1D3C019D6C7AD6B397EDF9F0B2D91231B2679CF91701B23B8094D66439C23718761BD10E12D2F2FFC23B8D2FBEB8264EB5A1B3D64CD3A30F106B6A75010AA0192

52541EFCFEA2D72930371D9D9FB17D860ABBE1C4A7BC0EC5E7050DA6D5078F05EF84939656F1A7EC169962C559BB60012EB0A27C3C7E65824EC2F5135DC707759099C4C1F904511C9FD588C130730CB95DBAB8E0B6908613CA9FF118EDE9EC654D44A474A213B886B5860179B8D794092406D9162E2BE4B00CE3D8E1F4B8A296F72C19FA630ECA98CAEF90D9DD8B17D80FBC541F1E219D1D2F43F9453E56D38A077FF250A366D613145A2020EC6B3C08EA27775E62A470905CA1168EDA834AF51986A242B4E1F31F2C565725121452AB5AA57C800BEA3F63A6373A13185B520A63BE6B0E419998594DA979B1BB9EB46C4D0BEFBCECD53FB1B4FFCCEF4598ABC9C049F658538B1E56C047CA9FA7F00672C2F24D34CA5BC354246D7AAD279DE425D197E739A92ADB5F5CCF4AF2AE6C32A7ABB041644071AFE56C05E65AA1EB3FD159342219E7DA98635FEE6499EE0BB56E67E7843D916683340F5477ED1332F5028FAE8D62B36703A9CA3F7672780ECC4FDB094361C96FE505B6E3013422B5528D00FE67568CB2CC779438A628F937D0D8D1F049AE1A314A883088FE8C05F69AA51C0F63B86A95098E2CE27511C969CC0C6E22C37E2F8706587947994C8D2D9A086F5461C7F520E9BA5135E1FFE3CD2E61D64538ED21AC57C26BDC1959B39BE30DD7E056C4BF5F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0.64705902 0.64705902 0.64705902 sc
q
0 0 282 257 rc
1 0 0 -1 -19 284 cm
28.346457 28.346457 m
283.46457 28.346457 l
283.46457 283.46457 l
28.346457 283.46457 l
h
28.346457 28.346457 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 18.69261 246.65355 cm
/F1.1[ 10 0 0 -10 0 0]sf
-6.8861537 3.8549652 m
(!")[ 6.670000 0.000000 ] xS
/Cs1 SC
0.82890397 0.87453902 0.93533999 sc
CM
150.64264 106.28952 m
174.192 106.28952 l
174.192 67.040581 l
150.64264 67.040581 l
h
150.64264 106.28952 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
169.64264 177.71048 m
193.192 177.71048 l
193.192 216.95941 l
169.64264 216.95941 l
h
169.64264 177.71048 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
150.64264 57.228348 m
174.192 57.228348 l
174.192 17.979408 l
150.64264 17.979408 l
h
150.64264 57.228348 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
169.64264 226.77165 m
193.192 226.77165 l
193.192 266.0206 l
169.64264 266.0206 l
h
169.64264 226.77165 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
150.64264 157.31314 m
174.192 157.31314 l
174.192 118.0642 l
150.64264 118.0642 l
h
150.64264 157.31314 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
169.64264 126.68686 m
193.192 126.68686 l
193.192 165.93579 l
169.64264 165.93579 l
h
169.64264 126.68686 m
S
0 i
0.82890397 0.87453902 0.93533999 sc
CM
150.64264 206.37431 m
174.192 206.37431 l
174.192 167.12538 l
150.64264 167.12538 l
h
150.64264 206.37431 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
169.64264 77.625679 m
193.192 77.625679 l
193.192 116.87462 l
169.64264 116.87462 l
h
169.64264 77.625679 m
S
193.192 97.250153 m
277.56458 97.250153 l
S
0 i
CM
262.56458 186.74985 m
258.56458 188.24985 l
258.56458 185.24985 l
h
262.56458 186.74985 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 97.250153 m
277.56458 95.750153 l
277.56458 98.750153 l
h
281.56458 97.250153 m
S
1 J
1 j
0.60000002 i
193.192 146.31133 m
277.56458 146.31133 l
S
0 i
CM
262.56458 137.68867 m
258.56458 139.18867 l
258.56458 136.18867 l
h
262.56458 137.68867 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 146.31133 m
277.56458 144.81133 l
277.56458 147.81133 l
h
281.56458 146.31133 m
S
1 J
1 j
0.60000002 i
193.192 197.33495 m
276.50702 197.33495 l
S
0 i
CM
261.50702 86.665054 m
257.50702 88.165054 l
257.50702 85.165054 l
h
261.50702 86.665054 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
280.50702 197.33495 m
276.50702 195.83495 l
276.50702 198.83495 l
h
280.50702 197.33495 m
S
1 J
1 j
0.60000002 i
193.192 246.39612 m
277.56458 246.39612 l
S
0 i
CM
262.56458 37.603878 m
258.56458 39.103878 l
258.56458 36.103878 l
h
262.56458 37.603878 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 246.39612 m
277.56458 244.89612 l
277.56458 247.89612 l
h
281.56458 246.39612 m
S
/Cs2 SC
0 sc
1 0 0 -1 243.33011 45.341915 cm
/F2.1[ 8 0 0 -8 0 0]sf
-23.163076 2.8880005 m
(!"#$%$$&')[ 4.744000 4.744000 4.000000 4.744000 4.448000 4.744000 4.744000 1.776000 0.000000 ] xS
1 0 0 -1 247.13779 94.403091 cm
-17.62677 2.8880005 m
(!"#\(\)*+,)[ 4.744000 4.744000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
1 0 0 -1 249.90703 145.42671 cm
-14.028 2.8880005 m
(!"#!-)[ 4.744000 4.744000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 243.33011 194.48788 cm
-23.307077 2.8880005 m
(!"#!,'"\(-+)[ 4.744000 4.744000 4.000000 4.744000 2.520000 4.296000 4.744000 1.776000 4.296000 0.000000 ] xS
1 0 0 -1 243.33011 243.54906 cm
-23.011076 2.8880005 m
($%#!,'"\(-+)[ 4.744000 4.448000 4.000000 4.744000 2.520000 4.296000 4.744000 1.776000 4.296000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -19 284 cm
28.346457 146.31133 m
163.74265 146.31133 l
S
0 i
CM
148.74265 137.68867 m
144.74265 139.18867 l
144.74265 136.18867 l
h
148.74265 137.68867 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
167.74265 146.31133 m
163.74265 144.81133 l
163.74265 147.81133 l
h
167.74265 146.31133 m
S
1 J
1 j
0.60000002 i
121.34996 183.36725 m
111.17525 169.86069 l
62.452431 169.86069 l
34.246456 169.86069 l
S
0 i
CM
11.246456 114.13931 m
15.246456 112.63931 l
15.246456 115.63931 l
h
11.246456 114.13931 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
30.246456 169.86069 m
34.246456 171.36069 l
34.246456 168.36069 l
h
30.246456 169.86069 m
S
1 J
1 j
0.60000002 i
28.346457 197.33495 m
163.74265 197.33495 l
S
0 i
CM
148.74265 86.665054 m
144.74265 88.165054 l
144.74265 85.165054 l
h
148.74265 86.665054 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
167.74265 197.33495 m
163.74265 195.83495 l
163.74265 198.83495 l
h
167.74265 197.33495 m
S
1 J
1 j
0.60000002 i
28.346457 246.39612 m
163.74265 246.39612 l
S
0 i
CM
148.74265 37.603878 m
144.74265 39.103878 l
144.74265 36.103878 l
h
148.74265 37.603878 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
167.74265 246.39612 m
163.74265 244.89612 l
163.74265 247.89612 l
h
167.74265 246.39612 m
S
1 1 1 sc
CM
99.787628 86.941048 m
94.712898 88.627502 96.736572 102.82462 104.8319 100.40218 c
105.58297 105.1243 114.99675 104.35785 114.93521 100.40218 c
120.83794 105.46152 128.38127 95.373291 123.32161 90.31395 c
129.39294 87.861046 123.245 74.645142 118.26227 76.852821 c
117.86349 73.173149 108.95587 71.885475 108.17403 76.852821 c
103.13007 71.547928 92.61261 79.704491 99.787628 86.941048 c
h
99.787628 86.941048 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
118.78763 197.05894 m
113.7129 195.3725 115.73657 181.17537 123.8319 183.59782 c
124.58297 178.8757 133.99675 179.64215 133.93521 183.59782 c
139.83794 178.53847 147.38127 188.62671 142.32161 193.68605 c
148.39294 196.13895 142.245 209.35486 137.26227 207.14719 c
136.86349 210.82684 127.95587 212.11453 127.17403 207.14719 c
122.13007 212.45207 111.61261 204.29552 118.78763 197.05894 c
h
118.78763 197.05894 m
S
137.2381 182.21893 m
148.77438 160.04846 l
148.77438 151.81133 l
143.27438 151.81133 143.27438 140.81133 148.77438 140.81133 c
148.77438 97.250153 l
163.74265 97.250153 l
S
0 i
CM
148.74265 186.74985 m
144.74265 188.24985 l
144.74265 185.24985 l
h
148.74265 186.74985 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
167.74265 97.250153 m
163.74265 95.750153 l
163.74265 98.750153 l
h
167.74265 97.250153 m
S
1 J
1 j
0.60000002 i
130.83664 180.58063 m
131.39272 162.01089 l
131.39272 151.81133 l
125.89271 151.81133 125.89271 140.81133 131.39272 140.81133 c
131.39272 48.412476 l
277.56458 48.412476 l
S
0 i
CM
262.56458 235.58752 m
258.56458 237.08752 l
258.56458 234.08752 l
h
262.56458 235.58752 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
281.56458 48.412476 m
277.56458 46.912476 l
277.56458 49.912476 l
h
281.56458 48.412476 m
S
1 1 1 sc
CM
86.477882 136.63464 m
83.306175 137.68867 84.570976 146.56187 89.630554 145.04785 c
90.099976 147.99918 95.983582 147.52014 95.945122 145.04785 c
99.634323 148.20995 104.34891 141.9048 101.18662 138.74271 c
104.98121 137.20964 101.13874 128.94971 98.024529 130.3295 c
97.775299 128.02971 92.208031 127.22491 91.719383 130.3295 c
88.56691 127.01395 81.9935 132.11179 86.477882 136.63464 c
h
86.477882 136.63464 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -19 284 cm
105.47788 147.36536 m
102.30618 146.31133 103.57098 137.43813 108.63055 138.95215 c
109.09998 136.00082 114.98358 136.47986 114.94512 138.95215 c
118.63432 135.79005 123.34891 142.0952 120.18662 145.25729 c
123.98121 146.79036 120.13874 155.05029 117.02453 153.6705 c
116.7753 155.97029 111.20803 156.77509 110.71938 153.6705 c
107.56691 156.98605 100.9935 151.88821 105.47788 147.36536 c
h
105.47788 147.36536 m
S
129.79039 246.39612 m
130.14841 216.11722 l
S
0 i
CM
111.1957 71.8825 m
109.64851 67.900513 l
112.64831 67.865044 l
h
111.1957 71.8825 m
f
0 J
0 j
1 0 0 -1 -19 284 cm
130.19571 212.11751 m
128.64851 216.09949 l
131.6483 216.13496 l
h
130.19571 212.11751 m
S
/Cs2 SC
0 sc
1 0 0 -1 30.735119 42.994034 cm
-13 2.8880005 m
(\(.#$%$$&')[ 1.776000 2.368000 4.000000 4.744000 4.448000 4.744000 4.744000 1.776000 0.000000 ] xS
1 0 0 -1 26.581272 92.231422 cm
-8.8461542 2.8880005 m
(\(.#\(\)*+,)[ 1.776000 2.368000 4.000000 1.776000 4.448000 4.000000 2.520000 0.000000 ] xS
1 0 0 -1 23.812042 143.67538 cm
-6.0769229 2.8880005 m
(\(.#!-)[ 1.776000 2.368000 4.000000 4.744000 0.000000 ] xS
1 0 0 -1 32.812042 120.97945 cm
-15.076923 2.8880005 m
(!"#$,/\)-0#!-)[ 4.744000 4.744000 4.000000 4.744000 2.664000 4.296000 4.448000 4.296000 4.448000 4.000000 4.744000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
